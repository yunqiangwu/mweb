<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wayne</title>
  
  <subtitle>有理想的码农</subtitle>
  <link href="http://blog.jajabjbj.top/atom.xml" rel="self"/>
  
  <link href="http://blog.jajabjbj.top/"/>
  <updated>2022-07-15T16:13:40.425Z</updated>
  <id>http://blog.jajabjbj.top/</id>
  
  <author>
    <name>Wayne</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是 wasm(webassembly) 技术</title>
    <link href="http://blog.jajabjbj.top/2022/07/10/wasm/"/>
    <id>http://blog.jajabjbj.top/2022/07/10/wasm/</id>
    <published>2022-07-10T12:08:58.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-wasm-wasi-wapm-技术"><a href="#什么是-wasm-wasi-wapm-技术" class="headerlink" title="什么是 wasm wasi wapm 技术"></a>什么是 wasm wasi wapm 技术</h1><h2 id="什么是-wasm"><a href="#什么是-wasm" class="headerlink" title="什么是 wasm"></a>什么是 wasm</h2><blockquote><p>wasm官网: <a href="https://webassembly.org/">https://webassembly.org/</a></p></blockquote><p>wasm 全称 WebAssembly，是一种通用字节码的技术，通过该技术将其他语言（比如 go, rust, c&#x2F;c++, 等）的程序代码编译成可以直接在浏览器环境执行的字节码程序。<br>因为该 WebAssembly 是一种字通用的节码技术规范，所以 WebAssembly 不仅仅可以在浏览器执行，还可以在其他变成语言环境中执行，比如 ，python， c，go， rust，等.</p><h3 id="为什么需要搞一个-wasm-字节码，不能所以平台都用-js-做为-通用编码技术吗？"><a href="#为什么需要搞一个-wasm-字节码，不能所以平台都用-js-做为-通用编码技术吗？" class="headerlink" title="为什么需要搞一个  wasm 字节码，不能所以平台都用 js 做为 通用编码技术吗？"></a>为什么需要搞一个  wasm 字节码，不能所以平台都用 js 做为 通用编码技术吗？</h3><p>理论上 在其他语言环境中实现 js 执行引擎， 是可以把 js 做为一个 通用编码技术的。<br>那为什么还需做一个 wasm 出来呢。 我认为有以下几点原因：</p><ul><li>js 代码是文本文件格式。在 web 环境下，网络传输效率远远不如 wasm 二进制数据传输。</li><li>js 相对于 c  和 rust ，而已，是一种弱类型语言，写代码没有严格类型校验，容易写成不稳定的代码。</li><li>js 是有 GC(自动垃圾清理功能)，用户不用关注内存的处理，导致的结果就是 GC 处理过程严重拖慢性能， 而且由于是系统 GC， 用户很难精确控制内存。容易导致内存占用过高。</li><li>js 是文本解析型编程语言，文本解析效率低，wasm 二进制代码解析执行效率会高于 js。</li><li>js 由于历史原因，js 本身就存在一些缺陷（js 之父说的），而且 js 引擎需要实现的成本过高， wasm 的执行引擎可以说是 比 js 新的产物， 在设计 wasm 字节码的时候，考虑各个方便比较完善，漏洞也比较少。</li></ul><h2 id="什么是-wasi"><a href="#什么是-wasi" class="headerlink" title="什么是 wasi"></a>什么是 wasi</h2><blockquote><p>wasi官网: <a href="https://wasi.dev/">https://wasi.dev/</a></p></blockquote><p>wasi 全称 The WebAssembly System Interface  通俗来讲就是一个对接规范。  </p><p>就像前后端分离的 RestFul 类似，只要前后端约定一套 RESTful 接口对接规范 ，无论前端使用的框架是 jQuery 或 vue 或 react ， 无论后端使用 java node.js 或者 java 还是 go。 都可以进行前后端通信。</p><p>wasi 也是同样的道理， wasi 约定了也行函数接口，不同的语言代码的生成的字节码规则是一致的，这样就可以在其他平台执行这个字节码。</p><p>举个栗子：  </p><p>比如我用 c语言 写了一个程序，读取某个文件， 把文件内容输出到屏幕。</p><p>然后我把这个程序编译成 wasm 字节码。 然后让 web 浏览器去执行。</p><p>我们都知道 浏览器是不可以直接读取系统文件的。那么 web 浏览器应该如何去执行这个字节码程序呢？</p><p>通过 wasi (后文会介绍) 协议，我们可以在 浏览器环境中用 JavaScript 写 读取文件的 API 回调函数，然后在执行字节码程序之前，把这个 options 传给 wasm 执行引擎。 js 中可以实现 文件读取逻辑（可能是从网络中读取，也可以返回一段字符串）。   </p><p>然后 web 浏览器 就可以无障碍的执行这段 字节码程序了。</p><p><img src="/images/wasm/2022-07-16-00-03-17.png"></p><p>wasm的好处:</p><ul><li>可以移植其他平台的代码给不同平台执行（跨平台跨语言执行能力）</li><li>可以用到其他语言的特性，给浏览器执行环境赋能，比如通过 rust 生成的 wasm，有更高的执行效率和内存安全特性。</li><li>通过 wasi 可以在浏览器端实现模拟 文件系统， sock 网络服务等， 实现类似 webide</li></ul><h2 id="如何生成-wasm-字节码程序"><a href="#如何生成-wasm-字节码程序" class="headerlink" title="如何生成 wasm 字节码程序"></a>如何生成 wasm 字节码程序</h2><p>因为 wasm 是一种通用的字节码交互技术，大部分流行的语言的环境的 sdk 工具包中就内置了 wasm 相关的工具。 比如 go 语言中可以通 <code>GOOS=js GOARCH=wasm go build -o static/main.wasm</code>  生成 wasm 字节码程序。</p><p>另外还有其他第三方或者 wasm官方的工具。目前比较通用的一个工具是：wasmtime</p><blockquote><p>wasmtime官网文档: <a href="https://docs.wasmtime.dev/">https://docs.wasmtime.dev/</a></p></blockquote><p>这里简单举个栗子 用 Rust 生成字节码。</p><p>第一步我们需要安装 Rust 语言环境：</p><p><a href="https://www.rust-lang.org/zh-CN/tools/install">安装 rust 文档</a></p><p>第二步 安装 rust 的 wasm 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cargo install cargo-wasi</span><br></pre></td></tr></table></figure><p>第三步 创建 rust hello 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cargo new hello-world</span><br><span class="line">$ <span class="built_in">cd</span> hello-world</span><br></pre></td></tr></table></figure><p>修改 src&#x2F;main.rs 添加导出函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world! wasm!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试运行 rust wasi 字节码程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cargo wasi run</span><br><span class="line">info: downloading component <span class="string">&#x27;rust-std&#x27;</span> <span class="keyword">for</span> <span class="string">&#x27;wasm32-wasi&#x27;</span></span><br><span class="line">info: installing component <span class="string">&#x27;rust-std&#x27;</span> <span class="keyword">for</span> <span class="string">&#x27;wasm32-wasi&#x27;</span></span><br><span class="line">   Compiling hello-world v0.1.0 (/hello-world)</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.16s</span><br><span class="line">     Running `/.cargo/bin/cargo-wasi target/wasm32-wasi/debug/hello-world.wasm`</span><br><span class="line">     Running `target/wasm32-wasi/debug/hello-world.wasm`</span><br><span class="line">Hello, world!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过 wasmtime 工具 运行 wasi 字节码程序。</p><blockquote><p>需要安装 wasmtime 工具， 安装文档：<a href="https://docs.wasmtime.dev/cli-install.html">https://docs.wasmtime.dev/cli-install.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wasmtime target/wasm32-wasi/debug/hello-world.wasm</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p>到此为止我们就实现生成了 wasm 字节码程序了</p><h3 id="为什么我更推荐使用-rust-字节码程序。"><a href="#为什么我更推荐使用-rust-字节码程序。" class="headerlink" title="为什么我更推荐使用 rust 字节码程序。"></a>为什么我更推荐使用 rust 字节码程序。</h3><p>因为 rust 是一种强类型，性能比较优秀的的 编程语言。 和 c 语言一样没有 gc，但是 rust 在内存操作方面，rust 编译器有优秀的 语法检查机制，所以可以让用户写出优秀的内存安全代码。</p><p>而且 rust 和 c 语言相比， 由于 rust 是后辈， 所以 rust 有很多新的现代语言特性， 可以通过简单的代码语法糖，实现 c语言的需要很多代码实现的功能。</p><h2 id="如何在-nodejs-环境执行-wasm-代码"><a href="#如何在-nodejs-环境执行-wasm-代码" class="headerlink" title="如何在 nodejs 环境执行 wasm 代码"></a>如何在 nodejs 环境执行 wasm 代码</h2><p>nodejs 16 内置了 WebAssembly API</p><p>在 刚刚的 rust 项目下， 创建 一个 test.js 脚本， 写入如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义 wasm 环境变量</span></span><br><span class="line">        <span class="keyword">const</span> env = &#123;</span><br><span class="line">            <span class="attr">PWD</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wasm 内存操作对象</span></span><br><span class="line">        <span class="keyword">let</span> thisView = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// wasm 程序接口对象</span></span><br><span class="line">        <span class="keyword">let</span> wasmRes = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// wasm 内存对象</span></span><br><span class="line">        <span class="keyword">let</span> thisMemory = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 控制台输出信息缓存变量</span></span><br><span class="line">        <span class="keyword">let</span> consoleLogData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">refreshMemory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!thisView || thisView.<span class="property">buffer</span>.<span class="property">byteLength</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                thisView = <span class="keyword">new</span> <span class="title class_">DataView</span>(thisMemory.<span class="property">buffer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">getiovs</span> = (<span class="params">iovs, iovsLen</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="title function_">refreshMemory</span>();</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">const</span> buffers = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: iovsLen &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> ptr = iovs + i * <span class="number">8</span>;</span><br><span class="line">              <span class="keyword">const</span> buf = thisView.<span class="title function_">getUint32</span>(ptr, <span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> bufLen = thisView.<span class="title function_">getUint32</span>(ptr + <span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(thisMemory.<span class="property">buffer</span>, buf, bufLen);</span><br><span class="line">            &#125;);</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">return</span> buffers;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Uint8ArrayToString</span>(<span class="params">fileData</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> dataString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileData.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              dataString += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(fileData[i]);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">return</span> dataString</span><br><span class="line">          </span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> importObject = &#123;</span><br><span class="line">            <span class="attr">wasi_snapshot_preview1</span>: &#123;</span><br><span class="line">                <span class="attr">fd_write</span>: <span class="function">(<span class="params">fd, iovs, iovsLen, nwritten</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> written = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">const</span> buffers = <span class="title function_">getiovs</span>(iovs, iovsLen);</span><br><span class="line"></span><br><span class="line">                    buffers.<span class="title function_">forEach</span>(<span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">                        consoleLogData+= <span class="title class_">Uint8ArrayToString</span>(buffer);</span><br><span class="line">                        written+=buffer.<span class="property">length</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    thisView.<span class="title function_">setUint32</span>(nwritten, written, <span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">environ_get</span>: <span class="function">(<span class="params">environ, environBuf</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">refreshMemory</span>();</span><br><span class="line">                    <span class="keyword">let</span> coffset = environ;</span><br><span class="line">                    <span class="keyword">let</span> offset = environBuf;</span><br><span class="line">                    <span class="title class_">Object</span>.<span class="title function_">entries</span>(env).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">                      thisView.<span class="title function_">setUint32</span>(coffset, offset, <span class="literal">true</span>);</span><br><span class="line">                      coffset += <span class="number">4</span>;</span><br><span class="line">                      offset += <span class="title class_">Buffer</span>.<span class="title function_">from</span>(thisMemory.<span class="property">buffer</span>).<span class="title function_">write</span>(</span><br><span class="line">                        <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>\0`</span>,</span><br><span class="line">                        offset</span><br><span class="line">                      );</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">environ_sizes_get</span>: <span class="function">(<span class="params">environCount, environBufSize</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">refreshMemory</span>();</span><br><span class="line">                    <span class="keyword">const</span> envProcessed = <span class="title class_">Object</span>.<span class="title function_">entries</span>(env).<span class="title function_">map</span>(</span><br><span class="line">                        <span class="function">(<span class="params">[key, value]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>\0`</span></span><br><span class="line">                    );</span><br><span class="line">                    <span class="keyword">const</span> size = envProcessed.<span class="title function_">reduce</span>(</span><br><span class="line">                        <span class="function">(<span class="params">acc, e</span>) =&gt;</span> acc + <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(e),</span><br><span class="line">                        <span class="number">0</span></span><br><span class="line">                    );</span><br><span class="line">                    thisView.<span class="title function_">setUint32</span>(environCount, envProcessed.<span class="property">length</span>, <span class="literal">true</span>);</span><br><span class="line">                    thisView.<span class="title function_">setUint32</span>(environBufSize, size, <span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">proc_exit</span>: <span class="function">(<span class="params">rval</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> wasmFileBuffer = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;target/wasm32-wasi/debug/code-stock.wasm&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        wasmRes = <span class="keyword">await</span> <span class="title class_">WebAssembly</span>.<span class="title function_">instantiate</span>(wasmFileBuffer, importObject);</span><br><span class="line">        thisMemory = wasmRes.<span class="property">instance</span>.<span class="property">exports</span>.<span class="property">memory</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wasmRes.instance.exports._start &amp;&amp; wasmRes.instance.exports._start();</span></span><br><span class="line">        </span><br><span class="line">        wasmRes.<span class="property">instance</span>.<span class="property">exports</span>.<span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">            consoleLogData,</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>然后直接通过 <code>node test.js </code> 既可执行 wasm 代码</p><h2 id="如何在浏览器环境执行-wasm-程序"><a href="#如何在浏览器环境执行-wasm-程序" class="headerlink" title="如何在浏览器环境执行 wasm 程序"></a>如何在浏览器环境执行 wasm 程序</h2><p>目前新版本的现代浏览器基本上都有 WebAssembly API </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> env = &#123;</span><br><span class="line">            <span class="attr">PWD</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> thisView = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> wasmRes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> thisMemory = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> consoleLogData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">refreshMemory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!thisView || thisView.<span class="property">buffer</span>.<span class="property">byteLength</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                thisView = <span class="keyword">new</span> <span class="title class_">DataView</span>(thisMemory.<span class="property">buffer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">getiovs</span> = (<span class="params">iovs, iovsLen</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="title function_">refreshMemory</span>();</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">const</span> buffers = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: iovsLen &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> ptr = iovs + i * <span class="number">8</span>;</span><br><span class="line">              <span class="keyword">const</span> buf = thisView.<span class="title function_">getUint32</span>(ptr, <span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> bufLen = thisView.<span class="title function_">getUint32</span>(ptr + <span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(thisMemory.<span class="property">buffer</span>, buf, bufLen);</span><br><span class="line">            &#125;);</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">return</span> buffers;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Uint8ArrayToString</span>(<span class="params">fileData</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> dataString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileData.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              dataString += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(fileData[i]);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">return</span> dataString</span><br><span class="line">          </span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> importObject = &#123;</span><br><span class="line">            <span class="attr">wasi_snapshot_preview1</span>: &#123;</span><br><span class="line">                <span class="attr">fd_write</span>: <span class="function">(<span class="params">fd, iovs, iovsLen, nwritten</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> written = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">const</span> buffers = <span class="title function_">getiovs</span>(iovs, iovsLen);</span><br><span class="line"></span><br><span class="line">                    buffers.<span class="title function_">forEach</span>(<span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">                        consoleLogData+= <span class="title class_">Uint8ArrayToString</span>(buffer);</span><br><span class="line">                        written+=buffer.<span class="property">length</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    thisView.<span class="title function_">setUint32</span>(nwritten, written, <span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">environ_get</span>: <span class="function">(<span class="params">environ, environBuf</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">refreshMemory</span>();</span><br><span class="line">                    <span class="keyword">let</span> coffset = environ;</span><br><span class="line">                    <span class="keyword">let</span> offset = environBuf;</span><br><span class="line">                    <span class="title class_">Object</span>.<span class="title function_">entries</span>(env).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">                      thisView.<span class="title function_">setUint32</span>(coffset, offset, <span class="literal">true</span>);</span><br><span class="line">                      coffset += <span class="number">4</span>;</span><br><span class="line">                      offset += <span class="title class_">Buffer</span>.<span class="title function_">from</span>(thisMemory.<span class="property">buffer</span>).<span class="title function_">write</span>(</span><br><span class="line">                        <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>\0`</span>,</span><br><span class="line">                        offset</span><br><span class="line">                      );</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">environ_sizes_get</span>: <span class="function">(<span class="params">environCount, environBufSize</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">refreshMemory</span>();</span><br><span class="line">                    <span class="keyword">const</span> envProcessed = <span class="title class_">Object</span>.<span class="title function_">entries</span>(env).<span class="title function_">map</span>(</span><br><span class="line">                        <span class="function">(<span class="params">[key, value]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>\0`</span></span><br><span class="line">                    );</span><br><span class="line">                    <span class="keyword">const</span> size = envProcessed.<span class="title function_">reduce</span>(</span><br><span class="line">                        <span class="function">(<span class="params">acc, e</span>) =&gt;</span> acc + <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(e),</span><br><span class="line">                        <span class="number">0</span></span><br><span class="line">                    );</span><br><span class="line">                    thisView.<span class="title function_">setUint32</span>(environCount, envProcessed.<span class="property">length</span>, <span class="literal">true</span>);</span><br><span class="line">                    thisView.<span class="title function_">setUint32</span>(environBufSize, size, <span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">proc_exit</span>: <span class="function">(<span class="params">rval</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> wasmFileBuffer = <span class="title function_">fetch</span>(<span class="string">&#x27;target/wasm32-wasi/debug/code-stock.wasm&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        wasmRes = <span class="keyword">await</span> <span class="title class_">WebAssembly</span>.<span class="title function_">instantiate</span>(wasmFileBuffer, importObject);</span><br><span class="line">        thisMemory = wasmRes.<span class="property">instance</span>.<span class="property">exports</span>.<span class="property">memory</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wasmRes.instance.exports._start &amp;&amp; wasmRes.instance.exports._start();</span></span><br><span class="line">        </span><br><span class="line">        wasmRes.<span class="property">instance</span>.<span class="property">exports</span>.<span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">            consoleLogData,</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="什么是-wapm"><a href="#什么是-wapm" class="headerlink" title="什么是 wapm"></a>什么是 wapm</h2><blockquote><p>wamp官网: <a href="https://wapm.io/">https://wapm.io/</a></p></blockquote><p>wapm 全称是 webassembly Package management , 是一个线上的 wasm 二进制包管理仓库。作用类似于 node.js 的 npm 或 java 的 maven</p><p>我们可以在这个仓库上 发布自己的 wasm 程序，或者下载运行别人发布的 wasm 程序。</p><h2 id="git-repo"><a href="#git-repo" class="headerlink" title="git repo"></a>git repo</h2><ul><li>rust 生成 wams: <a href="https://github.com/yunqiangwu/wasmide/tree/main/rust/code-stock">https://github.com/yunqiangwu/wasmide/tree/main/rust/code-stock</a></li><li>node.js 调用 wams： <a href="https://github.com/yunqiangwu/wasmide/blob/main/rust/code-stock/test.js">https://github.com/yunqiangwu/wasmide/blob/main/rust/code-stock/test.js</a></li><li>浏览器环境执行 wams: <a href="https://github.com/yunqiangwu/wasmide/tree/main/ui">https://github.com/yunqiangwu/wasmide/tree/main/ui</a></li></ul>]]></content>
    
    
    <summary type="html">什么是 wasm(webassembly) 技术</summary>
    
    
    
    
    <category term="wasm webassembly nodejs" scheme="http://blog.jajabjbj.top/tags/wasm-webassembly-nodejs/"/>
    
  </entry>
  
  <entry>
    <title>前端持续集成环境搭建</title>
    <link href="http://blog.jajabjbj.top/2020/02/19/2020-02-19/"/>
    <id>http://blog.jajabjbj.top/2020/02/19/2020-02-19/</id>
    <published>2020-02-19T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jenkins-nginx-实现持续集成"><a href="#jenkins-nginx-实现持续集成" class="headerlink" title="jenkins + nginx 实现持续集成"></a>jenkins + nginx 实现持续集成</h2><h3 id="搭建jenkins"><a href="#搭建jenkins" class="headerlink" title="搭建jenkins"></a>搭建jenkins</h3><p>jenkins 是一个开源持续集成工具，安装非常简单，为了管理方便，这里使用 docker 进行安装。</p><h4 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h4><p>centos 安装 docker </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker</span><br></pre></td></tr></table></figure><p>启动 docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="安装-jenkins"><a href="#安装-jenkins" class="headerlink" title="安装 jenkins"></a>安装 jenkins</h4><p>创建 jenkins 数据持久化目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /data</span><br><span class="line">sudo <span class="built_in">chmod</span> 777 /data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/jenkins_home</span><br></pre></td></tr></table></figure><p>通过docker容器安装jenkins</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --name jenkins-server \</span><br><span class="line">  -d \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  -v /data/jenkins_home:/var/jenkins_home \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/hzero-cli/jenkins</span><br></pre></td></tr></table></figure><blockquote><p>关于 docker 命令的学习可以看这里 👉 <a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全</a></p></blockquote><p><img src="/images/15820942246314/15820967152707.jpg" alt="-w470"></p><p>上面命令运行完成之后我们就已经成功运行了 jenkins 服务</p><p>我们可以打开地址 https:&#x2F;&#x2F;<code>centos服务器ip</code>:8080，可以看到 jenkins 的界面。</p><blockquote><p>这里的 <code>centos服务器ip</code> 就是你自己的服务器 ip，在这个教程里面，我们演示的服务器ip是 <code>172.22.0.4</code>。</p></blockquote><p><img src="/images/15820942246314/15820961636958.jpg" alt="-w1091"></p><p>接下来我们需要获取jenkins初始化密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jenkins-server \</span><br><span class="line">    <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15820967619904.jpg" alt="-w455"></p><p>这里返回的一段字符串<code>6c46ccc61c804279a1017b743ab22aa4</code>就是我们需要的密码</p><p>输入密码之后，选择安装初始化的插件</p><p><img src="/images/15820942246314/15820971428778.jpg" alt="-w1013"><br><img src="/images/15820942246314/15820972130894.jpg" alt="-w997"><br>插件安装好之后，系统会提示你设置用户名密码，当然你也可以不设置，直接用 admin 账号。重新进入 jenkins 界面。<br><img src="/images/15820942246314/15820988660511.jpg" alt="-w689"><br>点击输入账号里面，这里的密码就是上文获取到的 jenkins 初始化密码 <code>6c46ccc61c804279a1017b743ab22aa4</code>，点击登录，进入系统:<br><img src="/images/15820942246314/15820989609929.jpg" alt="-w696"></p><p>到此为止。jenkins 就算是安装好了</p><blockquote><p>我们如果想要卸载 jenkins 的话，只需要运行 <code>docker rm -f jenkins-server</code> 就可以了。</p><p>因为我们配置了 jenkins 数据持久化的目录 <code>/data/jenkins_home</code>， 只要这个文件夹还在，jenkins 配置就可以一直保留，下次想运行 jenkins 是，运行上文安装 jenkins 的 docker run 命令就可以恢复 docker 运行了。</p></blockquote><h3 id="配置-jenkins-的-nodejs-插件"><a href="#配置-jenkins-的-nodejs-插件" class="headerlink" title="配置 jenkins 的 nodejs 插件"></a>配置 jenkins 的 nodejs 插件</h3><p>安装完 jenkins 之后， 需要配置一下 nodejs 插件，后面才能让 jenkins 跑前端持续集成任务。</p><p>点击 <strong>系统管理</strong>  进入 jenkins 系统管理页面<br><img src="/images/15820942246314/15820991787999.jpg" alt="-w315"></p><p>点击 <strong>插件管理</strong> 进入插件管理<br><img src="/images/15820942246314/15821002348355.jpg" alt="-w1021"></p><p>进入 <strong>可选插件</strong> 选项卡，搜索并安装 <code>nodejs</code> 插件<br><img src="/images/15820942246314/15821180399210.jpg" alt="-w1120"></p><p>勾选 <code>安装完成后重启选项</code>，安装完插件之后 jenkins 会 <strong>自动重启</strong></p><p><img src="/images/15820942246314/15821181345609.jpg" alt="-w554"></p><p>进入 <strong>全局工具配置</strong> 配置 nodejs 全局工具</p><p><img src="/images/15820942246314/15821182607013.jpg" alt="-w931"></p><p>点击 <strong>新增 NodeJS</strong> 按键新增一个 nodejs 全局工具，勾选 <strong>自动安装</strong></p><p><img src="/images/15820942246314/15821185123655.jpg" alt="15821185123655"></p><p>注意:</p><ul><li>安装 nodejs 时需要安装两个 node 全局命令 <code>yarn</code> 和 <code>lerna</code>, 然后点击保存。</li></ul><h3 id="测试-nodejs-插件"><a href="#测试-nodejs-插件" class="headerlink" title="测试 nodejs 插件"></a>测试 nodejs 插件</h3><p>我们安装完了 nodejs 插件之后，先回到首页 新建一个 jenkins 任务测试一下 nodejs。</p><p>点击 <strong>创建一个新任务</strong> 打开任务编辑界面<br><img src="/images/15820942246314/15821185754719.jpg" alt="-w630"><br>选择 <strong>构建自由风格的软件项目</strong>， 输入一个任务名字<code>test-node-demo</code>:<br><img src="/images/15820942246314/15821187127960.jpg" alt="-w718"></p><p>在构建环境这里选择我们刚刚配置的 nodejs 全局工具</p><p><img src="/images/15820942246314/15821187744475.jpg" alt="-w734"></p><p>在构建这里 点击 <strong>增加构建步骤</strong> ，在弹出的选项中选择 <strong>执行shell</strong> ：</p><p><img src="/images/15820942246314/15821188924270.jpg" alt="-w359"></p><p>在命令输入框中输入,然后点击保存按钮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -e &#x27;console.log(&quot;Hello Hzero!&quot;);&#x27;</span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15821190991233.jpg" alt="-w758"></p><p>然后点击这个任务的 <strong>立即构建</strong> 按钮</p><p>构建时，在下面会出现一个进度条，点击进度条 可以看执行的日志</p><p><img src="/images/15820942246314/15821191550792.jpg" alt="-w624"></p><p>进入日志之后，将看到看到如下信息</p><p><img src="/images/15820942246314/15821240438051.jpg" alt="-w1061"></p><p>到此，nodejs 插件测试成功！</p><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>centos 安装 nginx 也非常简单 ，一句命令 <code>sudo yum install nginx</code> 就能搞定， 但是这样安装 nginx 之后，配置管理和nginx升级都比较麻烦，所以我们这里用 docker 来安装 nginx 。</p><p>这里我们先定义两个文件目录，用来保存 nginx 的部署文件和 nginx 的配置</p><ul><li><code>/data/nginx/wwwroot</code> nginx 的部署文件夹</li><li><code>/data/nginx/nginx_hzero.conf</code> hzero 的 nginx 配置</li></ul><p>首先创建 nginx 数据持久化文件夹和 配置保存文件夹,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /data/nginx/wwwroot</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /data/nginx/cfg</span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15821112605783.jpg" alt="-w380"></p><p>创建 nginx 配置文件, 保存在 <code>/data/nginx/cfg/nginx_hzero.conf</code></p><p>在命令行运行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /data/nginx/cfg/nginx_hzero.conf</span></span><br><span class="line"></span><br><span class="line">sudo -s <span class="comment"># 进入root用户模式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /data/nginx/cfg/nginx_hzero.conf &lt;&lt; <span class="string">END</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen       80;</span></span><br><span class="line"><span class="string">    server_name  localhost;</span></span><br><span class="line"><span class="string">    root   /usr/share/nginx/html/dist;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">      try_files \$uri /index.html;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    error_page   500 502 503 504  /50x.html;</span></span><br><span class="line"><span class="string">    location = /50x.html &#123;</span></span><br><span class="line"><span class="string">        root   /usr/share/nginx/html/dist;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Media: images, icons, video, audio, HTC</span></span><br><span class="line"><span class="string">    location ~* \.(jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ &#123;</span></span><br><span class="line"><span class="string">    expires 1M;</span></span><br><span class="line"><span class="string">    access_log off;</span></span><br><span class="line"><span class="string">    add_header Cache-Control &quot;public&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # CSS and Javascript</span></span><br><span class="line"><span class="string">    location ~* \.(css|js)$ &#123;</span></span><br><span class="line"><span class="string">    expires 1y;</span></span><br><span class="line"><span class="string">    access_log off;</span></span><br><span class="line"><span class="string">    add_header Cache-Control &quot;public&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15821112926505.jpg" alt="-w590"></p><p>运行nginx镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -d \</span><br><span class="line">  -p 40080:80 \</span><br><span class="line">  -v /data/nginx/cfg/:/etc/nginx/conf.d/ \</span><br><span class="line">  -v /data/nginx/wwwroot/:/usr/share/nginx/html/ \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15821113566156.jpg" alt="-w458"></p><p>添加测试文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /data/nginx/wwwroot/dist</span><br><span class="line">sudo <span class="built_in">echo</span> Hello Nginx &gt; /data/nginx/wwwroot/dist/test.txt</span><br></pre></td></tr></table></figure><p>测试 nginx 运行效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://172.22.0.4:40080/test.txt</span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15821113849756.jpg" alt="-w472"></p><p>如果能显示 Hello Nginx 说明 nginx 安装成功</p><h3 id="配置-jenkins-持续集成任务"><a href="#配置-jenkins-持续集成任务" class="headerlink" title="配置 jenkins 持续集成任务"></a>配置 jenkins 持续集成任务</h3><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>配置 jenkins 任务之前，我们先准备一个 hzero-front 工程的代码仓库地址：<br><code>https://code.choerodon.com.cn/hft/hzero-front-demo.git</code></p><p>回到 jenkins 首页 新建一个 jenkins 任务。</p><p>点击 <strong>创建一个新任务</strong> 打开任务编辑界面<br><img src="/images/15820942246314/15821185754719.jpg" alt="-w630"><br>选择 <strong>构建自由风格的软件项目</strong>， 输入一个任务名字<code>hzero-front-ci</code>:</p><p>点击保存后会进入任务编辑页面：</p><p><img src="/images/15820942246314/15821309390419.jpg" alt="-w1054"></p><p>在任务编辑界面的源代码管理 选择 git 选项<br>安装图片填写下面信息：</p><ul><li>Repository URL： 输入代码库地址（<code>https://code.choerodon.com.cn/hft/hzero-front-demo.git</code>）</li><li>Credentials：添加 code.choerodon.com.cn 的账号密码</li></ul><p>在编译环境设置里面勾选上 nodejs 工具。</p><p><img src="/images/15820942246314/15821311690599.jpg" alt="-w980"></p><p>添加一个构建步骤 <code>执行 shell</code><br><img src="/images/15820942246314/15821312331832.jpg" alt="-w515"></p><p>输入下面的 shell 脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; src/config/.env.production.yml.local  &lt;&lt; <span class="string">END</span></span><br><span class="line"><span class="string">BASE_PATH: /</span></span><br><span class="line"><span class="string">PLATFORM_VERSION: SAAS</span></span><br><span class="line"><span class="string">CLIENT_ID: localhost</span></span><br><span class="line"><span class="string">GENERATE_SOURCEMAP: false</span></span><br><span class="line"><span class="string">API_HOST: http://backend.hft.jajabjbj.top</span></span><br><span class="line"><span class="string">WEBSOCKET_HOST: ws://ws.hft.jajabjbj.top</span></span><br><span class="line"><span class="string">SKIP_TS_CHECK_IN_START: false</span></span><br><span class="line"><span class="string">ENABLE_VUE_SUPPORT: false</span></span><br><span class="line"><span class="string">SKIP_ESLINT_CHECK_IN_START: false</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line">yarn run build:production</span><br><span class="line">tar -zcf dist.tar.gz ./dist</span><br></pre></td></tr></table></figure><p><img src="/images/15820942246314/15821804456276.jpg" alt="-w961"></p><p>点击保存。</p><p>下一步然后点击 立即构建，这里会构建并生成 dist 文件</p><p><img src="/images/15820942246314/15821313783678.jpg" alt="-w711"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>构建完成生成了 dist 文件，下一步我们要把 构建生成的文件部署到 nginx 的 www 目录 <code>/data/nginx/wwwroot</code></p><p>接下来我们配置一下 dist 部署流程</p><p>部署通常都是指把构建好的 dist 文件部署到远程服务器，部署的方法有很多，比如 ftp、 构建 docker等、ssh ， 这里我们演示一下如何通过 ssh 远程部署 dist 文件到 nginx 服务器上。</p><p>首先我们需要安装一个 jenkins 插件 <code>Publish Over SSH</code>。</p><p><img src="/images/15820942246314/15821775655990.jpg" alt="-w814"></p><p>插件的安装方法上文中有提到，这里就不再赘述。</p><p>安装好之后，打开 <strong>系统管理</strong> &gt; <strong>配置中心</strong><br><img src="/images/15820942246314/15821779486366.jpg" alt="-w793"></p><p>把 nginx 服务器的信息 添加到 <code>Publish Over SSH</code> 的 ssh 配置。</p><p><img src="/images/15820942246314/15821778504635.jpg" alt="-w1413"></p><p>对关键配置项的解释：</p><ul><li><strong>name</strong>: 给服务器起一个名字，在后面设置任务时会用到这个名字。</li><li><strong>Hostname</strong>: sshd 服务器的ip地址, 也就是 nginx 服务器ip地址。</li><li><strong>Remote Directory</strong>: 这里是设置服务器上传目录，由于在 jenkins 任务里面可以配置， 为了不引起误解，这里设置成 <code>/</code> 就可以了。</li><li><strong>Passphrase&#x2F;Password</strong>: 这里是服务器 ssh 登录密码，如果是通过私钥连接服务器，可以不输入密码。</li><li><strong>Key</strong>: 这里是服务器的私钥文件内容。如果你是通过 密码 连接 ssh 服务器的话，可以不填私钥。</li></ul><p>然后打开我们刚刚创建的 jenkins 任务，点击配置按钮，进入任务编辑页面。</p><p><img src="/images/15820942246314/15821318511535.jpg" alt="-w500"></p><p>到 <code>Post-build Actions</code> 配置部分添加一个 构建后的部署流程。<br><img src="/images/15820942246314/15821781519316.jpg" alt="-w651"></p><p>然后输入相应的配置</p><p><img src="/images/15820942246314/15821781898781.jpg" alt="-w968"></p><p>对关键配置项的解释：</p><ul><li><strong>name</strong>: 上文在 <strong>系统管理</strong> &gt; <strong>配置中心</strong> 中配置的 ssh 服务器名字。</li><li><strong>Source files</strong>: 制定上传到服务器的文件，注意这里的文件是上面我们配置的构建脚本产生的文件。</li><li><strong>Remote directory</strong>: 这个是上传到远程服务器位置，上传上去的文件还是一个压缩包，后面还有在这个目录下执行节约命令</li><li><strong>Exec command</strong>: 在远程服务器上执行的 shell 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/nginx/wwwroot</span><br><span class="line">sudo <span class="built_in">rm</span> -rf dist</span><br><span class="line">sudo tar -zxf dist.tar.gz</span><br></pre></td></tr></table></figure><p>然后点击保存，再构建一次。<br><img src="/images/15820942246314/15821793949244.jpg" alt="-w1156"></p><p>看下构建日志。提示发布成功。</p><p><img src="/images/15820942246314/15821794072373.jpg" alt="-w525"></p><p>然后我们可以 在浏览器输入一下 nginx 服务器地址， 试试服务是否成功。</p><h4 id="配置自动持续集成"><a href="#配置自动持续集成" class="headerlink" title="配置自动持续集成"></a>配置自动持续集成</h4><p>如果想实现完全自动的持续集成，还需要配置一个地方</p><p>打开任务配置设置一个触发选项 <code>Poll SCM</code>，设置 <code>Schedule</code> 规则为: <code>H/15 * * * *</code></p><p><img src="/images/15820942246314/15821800915046.jpg" alt="-w1229"></p><p>这里配置项的意思是：每 15 分钟检查一次 git 源代码仓库是否有新的变更，如果有就执行构建任务。</p><blockquote><p><a href="https://tool.lu/crontab/">关于 cronjob 表达式的学习</a></p></blockquote><h2 id="jenkins-gh-pages-实现持续集成"><a href="#jenkins-gh-pages-实现持续集成" class="headerlink" title="jenkins + gh-pages 实现持续集成"></a>jenkins + gh-pages 实现持续集成</h2><p>如果没有 nginx 服务器，我们也可以把 dist 部署到 gh-pages 上。</p><p>考虑到 github 的 gh-pages 网速在国内有些慢， 本教程就用国内的 gitee 做一个示范。</p><blockquote><p>gitee网站: <a href="https://gitee.com/">https://gitee.com/</a></p></blockquote><p>首先我们在 gitee 上面注册好账号，然后再创建一个代码仓库。</p><p><img src="/images/15820942246314/15821819693074.jpg" alt="-w786"></p><p>我们可以得到一个代码仓库地址：<code>https://gitee.com/hzero-cli/hzero-front-demo-dist.git</code></p><p>部署到 gh-pages 上面我们需要用到一个 npm 工具</p><ul><li>gh-pages: <a href="https://www.npmjs.com/package/gh-pages">gh-pages 文档地址</a></li></ul><p>把这个工具配置到 nodejs 的全局工具上面：</p><p><img src="/images/15820942246314/15821830690021.jpg" alt="-w910"></p><p>配置好工具之后，开始创建 jenkins 任务。</p><p>为了简便，我们基于之前的持续集成任务创建一个新的持续集成任务。</p><p>点击 <strong>新建任务</strong> 按钮<br><img src="/images/15820942246314/15821821404080.jpg" alt="-w670"></p><p>为任务起一个新名字： <code>hzero-front-ci-gitee</code></p><p><img src="/images/15820942246314/15821822551782.jpg" alt="-w1074"></p><p>注意这里我们要选择 <strong>Copy from</strong>, 输入前面创建的任务名字：<code>hzero-front-ci</code></p><p>点击 ok ，进入构建配置部分。<br><img src="/images/15820942246314/15821827533997.jpg" alt="-w1201"></p><p>修改构建脚本，添加 gh-pages 部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">gh-pages -r https://hzero-cli:abcd1234@gitee.com/hzero-cli/hzero-front-demo-dist.git   -b gh-pages   -d dist</span><br></pre></td></tr></table></figure><p>然后删除从 <code>hzero-front-ci</code> 任务复制过来的 ssh部署 配置</p><p>保存，点击立即构建。</p><p>这样构建生成的 dist 就可以发布到 gitee 代码仓库了。</p><p><img src="/images/15820942246314/15821861555894.jpg" alt="-w820"></p><p>这里会多一个分支，就是我们部署上去的文件。</p><p>接下来我们需要给 gitee 代码仓库设置一下 gh-pages 的 http 服务。</p><p>点击 <strong>服务</strong> &gt; <strong>Gitee Pages</strong></p><p><img src="/images/15820942246314/15821862428010.jpg" alt="-w973"></p><p>设置部署分支为 gh-pages ,然后点击开始按钮</p><p>运行成功之后， 我们得到一个 http 访问地址：<code>http://hzero-cli.gitee.io/hzero-front-demo-dist/</code></p><p>但是访问时， console 还是会报错: </p><p><img src="/images/15820942246314/15821864231685.jpg" alt="-w1147"></p><p>这是因为 gitee 的 gh-pages 提供的 http 地址有一个根路径(public_path)。</p><p>所以我们修改一下构建的环境变量，打开任务的构建配置修改环境变量：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PUBLIC_URL:</span> <span class="string">/hzero-front-demo-dist/</span></span><br><span class="line"><span class="attr">BASE_PATH:</span> <span class="string">/hzero-front-demo-dist/</span></span><br></pre></td></tr></table></figure><p>注意一下 BASE_PATH 和 PUBLIC_URL 的区别。</p><ul><li><strong>PUBLIC_URL</strong> : 会影响资源加载路径，在资源加载路径前面加一层根路径。</li><li><strong>BASE_PATH</strong> : 会影响浏览器的地址栏根路径。在地址栏显示的地址上加一层根路径。</li></ul><p>虽然 BASE_PATH 不会影响资源加载路径，但是我们进入页面之后刷新，必须浏览器的地址栏是以 <code>http://hzero-cli.gitee.io/hzero-front-demo-dist/</code> 为前缀，所以要加一下 BASE_PATH 的配置。</p><p>清除构建缓存，然后点击重新构建<br><img src="/images/15820942246314/15821843422297.jpg" alt="-w369"></p><blockquote><p>注意: 由于 hzero-cli 默认开启了增量更新， 所以修改了环境变量之后，需要清空当前构建任务的缓存。</p></blockquote><p>如果你访问页面，第二次刷新还会有 404 的问题</p><p>这是因为我们 gh-pages 和 nginx 配置 不一样。<br>nginx 上面配置了一段代码： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这段代码， 服务器就会路径找不到的http请求重新定位到 &#x2F;index.html</p><p>但是 gh-pages 的原理是: 如果当前 http 请求路径定位不到仓库的文件，就返回 404.html 的内容。</p><p>所以为了能让页面正常显示，我们还需要在脚本构建完成之后 加一行代码 <code>cp dist/index.html dist/404.html</code><br>让浏览器能获取到 index.html 。</p><p>最后脚本修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br><span class="line"><span class="built_in">cat</span> &gt; src/config/.env.production.local.yml  &lt;&lt; <span class="string">END</span></span><br><span class="line"><span class="string">PUBLIC_URL: /hzero-front-demo-dist/</span></span><br><span class="line"><span class="string">BASE_PATH: /hzero-front-demo-dist/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PLATFORM_VERSION: SAAS</span></span><br><span class="line"><span class="string">CLIENT_ID: localhost</span></span><br><span class="line"><span class="string">GENERATE_SOURCEMAP: false</span></span><br><span class="line"><span class="string">API_HOST: http://backend.hft.jajabjbj.top</span></span><br><span class="line"><span class="string">WEBSOCKET_HOST: ws://ws.hft.jajabjbj.top</span></span><br><span class="line"><span class="string">SKIP_TS_CHECK_IN_START: false</span></span><br><span class="line"><span class="string">ENABLE_VUE_SUPPORT: false</span></span><br><span class="line"><span class="string">SKIP_ESLINT_CHECK_IN_START: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"></span><br><span class="line">yarn run build:production</span><br><span class="line"><span class="built_in">cp</span> dist/index.html dist/404.html</span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">gh-pages-clean</span><br><span class="line">gh-pages -r https://hzero-cli:abcd1234@gitee.com/hzero-cli/hzero-front-demo-dist.git \</span><br><span class="line">  -b gh-pages \</span><br><span class="line">  -d dist</span><br></pre></td></tr></table></figure><p>清除构建缓存之后，点击重新构建, 构建成功会自动部署，部署完成之后就可以访问： <a href="http://hzero-cli.gitee.io/hzero-front-demo-dist">http://hzero-cli.gitee.io/hzero-front-demo-dist</a> 了</p>]]></content>
    
    
    <summary type="html">前端持续集成环境搭建</summary>
    
    
    
    
    <category term="jenkins" scheme="http://blog.jajabjbj.top/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用高阶组件实现页面的表单数据和state缓存</title>
    <link href="http://blog.jajabjbj.top/2018/08/29/cache/"/>
    <id>http://blog.jajabjbj.top/2018/08/29/cache/</id>
    <published>2018-08-29T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>当页面上存在 Antd 的 From表单,切换到其他页面再切换回来,希望表单的数据和页面状态数据能够保留, 使用使用 <code>@cachePage</code> 高阶组件完成相应的功能</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>定义一个Map缓存对象<br>使用高阶组件包装一层 包含 From 表单的组件，</p><p>在高阶组件被加载时，在 componentDidMonent 方法中判断缓存对象中是否有该页面的数据， 如果有数据，就通过 From 表单的 Api ，把数据设置到组件的 From 数据里面，</p><p>在高阶组件销毁时，在组件的 componentWillUnMonent 方法中 把被包装组件的From表单的数据取出来 放到缓存对象中。</p><p><img src="/images/cache/1290619244.png" alt="-w369"></p><p>高阶代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内存缓冲对象</span></span><br><span class="line"><span class="keyword">const</span> cacheMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> cacheKeyList = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存路由页面表单 keep-alive</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; cacheKey               缓存的key,对应每个路由页面的key, 默认 路由页面组件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@propsMethod</span> props.cachePage.clear()  清除缓存，并标记这次表单将不被缓存</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">cachePage</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  cacheKey,</span></span><br><span class="line"><span class="params">&#125; = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">ComposedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isError = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!cacheKey) &#123;</span><br><span class="line">      <span class="comment">// console.warn(&#x27;缺失 CachePage 必填参数 cacheKey&#x27;);</span></span><br><span class="line">      isError = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cacheKeyList.<span class="title function_">indexOf</span>(cacheKey) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// console.warn(&#x27;CachePage ,cacheKey 必须保证全局唯一，多一个页面不能有相同 cacheKey &#x27;);</span></span><br><span class="line">      <span class="comment">// isError = true;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isError) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">ComposedComponent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cacheKeyList.<span class="title function_">push</span>(cacheKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前是否应该保存cache（如果被调用收到清理cache，就在组件销毁时不保存cache）</span></span><br><span class="line">    <span class="keyword">let</span> shouldSave = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> mCacheKey = cacheKey</span><br><span class="line">      || <span class="title class_">ComposedComponent</span>.<span class="property">id</span></span><br><span class="line">      || <span class="title class_">ComposedComponent</span>.<span class="property">key</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 获取cache</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getCache</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cache = cache = cacheMap[mCacheKey];</span><br><span class="line">      <span class="keyword">if</span> (!cache) &#123;</span><br><span class="line">        cache = &#123;&#125;;</span><br><span class="line">        cacheMap[mCacheKey] = cache;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> cache;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存cache</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setCache</span> = (<span class="params">cache</span>) =&gt; &#123;</span><br><span class="line">      cacheMap[mCacheKey] = cache;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清除cache</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clearCache</span> = (<span class="params">isClose</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">delete</span> cacheMap[mCacheKey] ;</span><br><span class="line">      <span class="keyword">if</span> (isClose) &#123;</span><br><span class="line">        shouldSave = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">WrapComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">      <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; form &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cacheData = <span class="title function_">getCache</span>();</span><br><span class="line">        <span class="keyword">if</span> (form &amp;&amp; cacheData.<span class="property">form</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; setFieldsValue, getFieldProps &#125; = form;</span><br><span class="line">          <span class="keyword">const</span> cacheFormData = cacheData.<span class="property">form</span>;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">keys</span>(cacheFormData).<span class="title function_">forEach</span>(<span class="function">(<span class="params">formKey</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getFieldProps</span>(formKey);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">// 设置数据到表单</span></span><br><span class="line">          <span class="title function_">setFieldsValue</span>(cacheFormData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pageComponent</span> &amp;&amp; cacheData.<span class="property">pageState</span>) &#123;</span><br><span class="line">          <span class="comment">// 设置数据到页面组件state</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">pageComponent</span>.<span class="title function_">setState</span>(cacheData.<span class="property">pageState</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        shouldSave = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldSave === <span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> &#123; form &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">const</span> cacheData = <span class="title function_">getCache</span>();</span><br><span class="line">        <span class="comment">// 获取页面组件表单数据</span></span><br><span class="line">        <span class="keyword">if</span> (form) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; getFieldsValue, getFieldProps &#125; = form;</span><br><span class="line">          cacheData.<span class="property">form</span> = <span class="title function_">getFieldsValue</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取页面组件state数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pageComponent</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">pageComponent</span>.<span class="property">state</span>) &#123;</span><br><span class="line">          cache.<span class="property">pageState</span> = <span class="variable language_">this</span>.<span class="property">pageComponent</span>.<span class="property">state</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存数据到缓存</span></span><br><span class="line">        <span class="title function_">setCache</span>(cache);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      actionObj = &#123;</span><br><span class="line">        <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">clearCache</span>();</span><br><span class="line">          shouldSave = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// eslint-disable-next-line react/no-string-refs</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ComposedComponent</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> &#123; this.pageComponent = c; &#125;&#125; cachePage=&#123;this.actionObj&#125; &#123;...this.props&#125; /&gt;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 让 Form 数据 JSON 反序列号支持 Date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateReviver</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)T(\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;(?:\.\d*)?)Z$/</span>.<span class="title function_">exec</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">moment</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">onClosePage</span> = (<span class="params">pathname</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (pathnameToCacheKey[pathname]) &#123;</span><br><span class="line">    pathnameToCacheKey[pathname](<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><ul><li><code>cacheKey</code> 缓存的key,对应每个路由页面的key, 必填参数</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在使用该高阶组件修饰的页面后, 页面的<code>props</code>内部会被注入一个cachePage对象,提供与以下操作缓存的方法:</p><ul><li><code>props.cachePage.clear()</code> : 清除缓存，并标记这次表单将不被缓存, 在页面组件列通过<code>this.props.cachePage.clear()</code>, 跳转到其他页面时,数据不会被缓存,并且清空上次缓存的数据</li></ul><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>在页面组件中加上这个注解，切换页面时，可以保留当前页面状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span>, &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; cachePage &#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/Cache/cacheFromWrapper&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Form</span>.<span class="title function_">create</span>()</span><br><span class="line">@<span class="title function_">cachePage</span>(&#123; <span class="attr">cacheKey</span>: <span class="string">&#x27;BasicFormPage&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">BasicFormPage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _style = &#123; <span class="attr">marginTop</span>: <span class="number">8</span> &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml">&lt;Form&#123;</span></span><br><span class="line"><span class="language-xml">            hideRequiredMark</span></span><br><span class="line"><span class="language-xml">            style=&#123;_style&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">FormItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">label</span>=<span class="string">&quot;标题&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;getFieldDecorator(&#x27;title&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">                rules: [&#123;</span></span><br><span class="line"><span class="language-xml">                  required: true, message: &#x27;请输入标题&#x27;,</span></span><br><span class="line"><span class="language-xml">                &#125;],</span></span><br><span class="line"><span class="language-xml">              &#125;)(</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;给目标起个名字&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">From</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><ul><li>通过可以在高阶组件里面把数据缓存到 localStorage</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>该高阶组件的表单缓存效果实现依赖 Antd 的 <code>From.create()</code>所以使用时,表单的创建必须用 antd 中的 <code>From.create()</code>生成表单</p>]]></content>
    
    
    <summary type="html">使用高阶组件实现页面的表单数据和state缓存</summary>
    
    
    
    
    <category term="react" scheme="http://blog.jajabjbj.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用 openssl 生成证书</title>
    <link href="http://blog.jajabjbj.top/2018/05/30/2018-05-30/"/>
    <id>http://blog.jajabjbj.top/2018/05/30/2018-05-30/</id>
    <published>2018-05-30T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-openssl-生成证书"><a href="#使用-openssl-生成证书" class="headerlink" title="使用 openssl 生成证书"></a>使用 openssl 生成证书</h2><p>今天在配置kibana权限设置时，kibana要求使用https链接。</p><p>于是总结了一下linux下openssl生成 签名的步骤：</p><p>x509证书一般会用到三类文，key，csr，crt。</p><p>Key 是私用密钥openssl格，通常是rsa算法。</p><p>Csr 是证书请求文件，用于申请证书。在制作csr文件的时，必须使用自己的私钥来签署申，还可以设定一个密钥。</p><p>crt是CA认证后的证书文，（windows下面的，其实是crt），签署人用自己的key给你签署的凭证。 </p><ul><li>key的生成</li></ul><p><code>openssl genrsa -des3 -out server.key 2048 </code></p><p>这样是生成rsa私钥，des3算法，openssl格式，2048位强度。server.key是密钥文件名。为了生成这样的密钥，需要一个至少四位的密码。可以通过以下方法生成没有密码的key:</p><p><code>openssl rsa -in server.key -out server.key </code></p><p>server.key就是没有密码的版本了。 </p><ul><li>生成CA的crt</li></ul><p><code>openssl req -new -x509 -key server.key -out ca.crt -days 3650 </code></p><p>生成的ca.crt文件是用来签署下面的server.csr文件。 </p><ul><li>csr的生成方法</li></ul><p><code>openssl req -new -key server.key -out server.csr </code></p><p>需要依次输入国家，地区，组织，email。最重要的是有一个common name，可以写你的名字或者域名。如果为了https申请，这个必须和域名吻合，否则会引发浏览器警报。生成的csr文件交给CA签名后形成服务端自己的证书。 </p><ul><li>crt生成方法</li></ul><p>CSR文件必须有CA的签名才可形成证书，可将此文件发送到verisign等地方由它验证，要交一大笔钱，何不自己做CA呢。</p><p><code>openssl x509 -req -days 3650 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt</code></p><p>输入key的密钥后，完成证书生成。-CA选项指明用于被签名的csr证书，-CAkey选项指明用于签名的密钥，-CAserial指明序列号文件，而-CAcreateserial指明文件不存在时自动生成。</p><p>最后生成了私用密钥：server.key和自己认证的SSL证书：server.crt</p><p>证书合并：</p><p><code>cat server.key server.crt &gt; server.pem</code></p><ul><li>配置docker 信任证书</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;http://b36c9ea6.m.daocloud.io&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;tlscacert&quot; : &quot;/data/cert/server.pem&quot;,</span><br><span class="line">  &quot;debug&quot; : true,</span><br><span class="line">  &quot;experimental&quot; : true</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15276924282309.jpg"></p>]]></content>
    
    
    <summary type="html">使用 openssl 生成证书</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建 gitlab-ci 持续集成环境</title>
    <link href="http://blog.jajabjbj.top/2018/05/30/2018-05-31-1/"/>
    <id>http://blog.jajabjbj.top/2018/05/30/2018-05-31-1/</id>
    <published>2018-05-30T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建-gitlab-ci-持续集成环境"><a href="#搭建-gitlab-ci-持续集成环境" class="headerlink" title="搭建 gitlab-ci 持续集成环境"></a>搭建 gitlab-ci 持续集成环境</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p><a href="https://www.docker.com/get-docker">https://www.docker.com/get-docker</a></p><h3 id="添加-hosts"><a href="#添加-hosts" class="headerlink" title="添加 hosts"></a>添加 hosts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 「192.168.99.1 」 为宿主机的ip</span><br><span class="line">192.168.99.1  gitlab.jajabjbj.top</span><br><span class="line">192.168.99.1  rancher.jajabjbj.top</span><br><span class="line">192.168.99.1  jenkins.jajabjbj.top</span><br><span class="line">192.168.99.1  docker.jajabjbj.top</span><br><span class="line">192.168.99.1  harbor.jajabjbj.top</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意： 这里不能使用127.0.0.1，应为在docker容器中的127.0.0.1 和宿主机的127.0.0.1是两个不同的ip，如果docker容器内解析这个域名就好得到错误的ip，这里「192.168.99.1 」 为你宿主机电脑上面的虚拟网卡的固定ip，可以安装 VirtrualBox 等软件后，宿主机上面会自动创建虚拟网卡。</p><h3 id="安装-nginx-proxy"><a href="#安装-nginx-proxy" class="headerlink" title="安装 nginx proxy"></a>安装 nginx proxy</h3><p>安装 nginx-proxy 的目的是为了让宿主机器通过一个端口号，向外以多个不同容器的方式提供多个服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo docker run -d -p 80:80 --name nginx-proxy \</span><br><span class="line">    -v /var/run/docker.sock:/tmp/docker.sock:ro \</span><br><span class="line">    jwilder/nginx-proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir -p /srv/gitlab</span><br><span class="line"></span><br><span class="line">sudo docker run -d --privileged \</span><br><span class="line">    --env GITLAB_OMNIBUS_CONFIG=&quot;external_url &#x27;http://gitlab.jajabjbj.top/&#x27;&quot; \</span><br><span class="line">    --env VIRTUAL_HOST=gitlab.jajabjbj.top \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/log/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># pages 服务</span><br><span class="line">gitlab_rails[&#x27;lfs_enabled&#x27;] = true</span><br><span class="line"></span><br><span class="line">pages_external_url &#x27;http://gitlab.jajabjbj.top&#x27;</span><br><span class="line"></span><br><span class="line">gitlab_rails[&#x27;pages_path&#x27;] =  &quot;/tmp/pages&quot;</span><br><span class="line"></span><br><span class="line">gitlab_rails[&#x27;lfs_enabled&#x27;] =  true</span><br></pre></td></tr></table></figure><h3 id="安装并添加-gitlab-runner"><a href="#安装并添加-gitlab-runner" class="headerlink" title="安装并添加 gitlab-runner"></a>安装并添加 gitlab-runner</h3><h4 id="docker-镜像运行方式"><a href="#docker-镜像运行方式" class="headerlink" title="docker 镜像运行方式"></a>docker 镜像运行方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; mkdir -p /srv/gitlab/gitlab-runner</span><br><span class="line">&gt; docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>在gitlab 上创建一个项目，打开项目CI设置，在项目里面添加一个 gitlab-runner</p><p>添加界面会提供一个「gitlab-ci token」： UbK4qdLj1hvBsVxTSUJ5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">&gt; docker exec -it gitlab-runner bash</span><br><span class="line">&gt; gitlab-ci-multi-runner register \</span><br><span class="line">    --docker-volumes /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    --docker-privileged</span><br><span class="line"></span><br><span class="line">Running in system-mode.</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://gitlab.jajabjbj.top/</span><br><span class="line">Please enter the gitlab-ci token for this runner:</span><br><span class="line">UbK4qdLj1hvBsVxTSUJ5</span><br><span class="line">Please enter the gitlab-ci description for this runner:</span><br><span class="line">[4857c90d8789]: mac-docker</span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line"></span><br><span class="line">Whether to lock the Runner to current project [true/false]:</span><br><span class="line">[true]: false</span><br><span class="line">Registering runner... succeeded                     runner=UbK4qdLj</span><br><span class="line">Please enter the executor: shell, ssh, docker+machine, docker, docker-ssh, parallels, virtualbox, docker-ssh+machine, kubernetes:</span><br><span class="line">docker</span><br><span class="line">Please enter the default Docker image (e.g. ruby:2.1):</span><br><span class="line">node</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>gitlab-ci 中要使用docker in docker 时, 必须在gitlab-ci.yml 中添加  docker:dind ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">image: docker:latest</span><br><span class="line">services:</span><br><span class="line">  - docker:dind</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">搭建 gitlab-ci 持续集成环境</summary>
    
    
    
    
    <category term="gitlab-ci" scheme="http://blog.jajabjbj.top/tags/gitlab-ci/"/>
    
  </entry>
  
  <entry>
    <title>使用 nginx-proxy 实现多个 docker容器以不同的域名共享宿主机80端口对外提供服务</title>
    <link href="http://blog.jajabjbj.top/2018/05/30/2018-05-31/"/>
    <id>http://blog.jajabjbj.top/2018/05/30/2018-05-31/</id>
    <published>2018-05-30T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-nginx-proxy-实现多个-docker-容器以不同的域名共享宿主机80端口对外提供服务"><a href="#使用-nginx-proxy-实现多个-docker-容器以不同的域名共享宿主机80端口对外提供服务" class="headerlink" title="使用 nginx-proxy 实现多个 docker 容器以不同的域名共享宿主机80端口对外提供服务"></a>使用 nginx-proxy 实现多个 docker 容器以不同的域名共享宿主机80端口对外提供服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -p 443:443 -v /var/run/docker.sock:/tmp/docker.sock:ro -v /data/cert:/etc/nginx/certs \</span><br><span class="line">    --name my-nginx-proxy jwilder/nginx-proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用 nginx-proxy 实现多个 docker容器以不同的域名共享宿主机80端口对外提供服务</summary>
    
    
    
    
    <category term="docker" scheme="http://blog.jajabjbj.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>本地安装 kubernetes 环境</title>
    <link href="http://blog.jajabjbj.top/2018/05/30/2018-06-03/"/>
    <id>http://blog.jajabjbj.top/2018/05/30/2018-06-03/</id>
    <published>2018-05-30T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-k8s-准备"><a href="#安装-k8s-准备" class="headerlink" title="安装 k8s 准备"></a>安装 k8s 准备</h2><h3 id="安装-Kubernetes"><a href="#安装-Kubernetes" class="headerlink" title="安装 Kubernetes"></a>安装 Kubernetes</h3><blockquote><p><a href="https://yq.aliyun.com/articles/221687">https://yq.aliyun.com/articles/221687</a></p></blockquote><ul><li>Mac OSX</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.2/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><ul><li>Linux</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.2/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><p>下载 minikube-windows-amd64.exe 文件，并重命名为 minikube.exe</p><ul><li>自己构建</li></ul><p>也可以从Github上获取相应的项目自行构建。</p><p>注：需要本地已经安装配置好 Golang 开发环境和Docker引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/AliyunContainerService/minikube</span><br><span class="line">cd minikube</span><br><span class="line">git checkout aliyun-v0.25.0</span><br><span class="line">make</span><br><span class="line">sudo cp out/minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="启动-k8s-amp-docker"><a href="#启动-k8s-amp-docker" class="headerlink" title="启动 k8s &amp; docker"></a>启动 k8s &amp; docker</h3><blockquote><p>缺省Minikube使用VirtualBox驱动来创建Kubernetes本地环境</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure><p> 打开Kubernetes控制台</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><p> <img src="http://cdn-qiniu-blog.jajabjbj.top/15280082718440.png"></p>]]></content>
    
    
    <summary type="html">本地安装 kubernetes 环境</summary>
    
    
    
    
    <category term="k8s" scheme="http://blog.jajabjbj.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>CSS 常用代码锦囊</title>
    <link href="http://blog.jajabjbj.top/2018/05/22/2018-05-22-1/"/>
    <id>http://blog.jajabjbj.top/2018/05/22/2018-05-22-1/</id>
    <published>2018-05-22T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-常用代码锦囊"><a href="#CSS-常用代码锦囊" class="headerlink" title="CSS 常用代码锦囊"></a>CSS 常用代码锦囊</h2><ul><li>三行文本溢出显示省略号</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.textOverflow3</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">4.5em</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">1em</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文本溢出省略</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.textoverflow</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    -o-<span class="attribute">text-overflow</span>: ellipsis;     <span class="comment">/* for Opera */</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;        <span class="comment">/* for IE */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textoverflow</span><span class="selector-pseudo">:after</span>&#123; <span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>; &#125;<span class="comment">/* for Firefox */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">0px</span>)&#123; <span class="selector-class">.textoverflow</span><span class="selector-pseudo">:after</span>&#123; <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>; &#125;<span class="comment">/* for Opera */</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>多栏CSS3</li></ul><p>使用css3来创建多栏，它可以自适应网页，不兼容IE</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#columns-3</span> &#123;</span><br><span class="line">   <span class="attribute">text-align</span>: justify;</span><br><span class="line">   -moz-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">   -moz-<span class="attribute">column-gap</span>: <span class="number">12px</span>;</span><br><span class="line">   -moz-<span class="attribute">column-rule</span>: <span class="number">1px</span> solid <span class="number">#c4c8cc</span>;</span><br><span class="line">   -webkit-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">   -webkit-<span class="attribute">column-gap</span>: <span class="number">12px</span>;</span><br><span class="line">   -webkit-<span class="attribute">column-rule</span>: <span class="number">1px</span> solid <span class="number">#c4c8cc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p data-height="800" data-theme-id="0" data-slug-hash="wcKrg" data-default-tab="result" data-user="camsong" data-embed-version="2" data-pen-title="2048 game" class="codepen">See the Pen <a href="https://codepen.io/camsong/pen/wcKrg/">2048 game</a> by Cam Song (<a href="https://codepen.io/camsong">@camsong</a>) on <a href="https://codepen.io">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>---]]></content>
    
    
    <summary type="html">CSS 常用代码锦囊</summary>
    
    
    
    
    <category term="css" scheme="http://blog.jajabjbj.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令锦囊</title>
    <link href="http://blog.jajabjbj.top/2018/05/22/2018-05-22/"/>
    <id>http://blog.jajabjbj.top/2018/05/22/2018-05-22/</id>
    <published>2018-05-22T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-常用命令锦囊"><a href="#git-常用命令锦囊" class="headerlink" title="git 常用命令锦囊"></a>git 常用命令锦囊</h2><ul><li>获取当前 项目 git url</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote show <span class="comment"># origin</span></span><br><span class="line">git config remote.origin.url <span class="comment"># &#123;git url&#125;</span></span><br></pre></td></tr></table></figure><ul><li>获取当前分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git symbolic-ref --short -q HEAD <span class="comment"># master</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">git 常用命令锦囊</summary>
    
    
    
    
    <category term="git" scheme="http://blog.jajabjbj.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>服务器端渲染程序 demo 图床</title>
    <link href="http://blog.jajabjbj.top/2018/05/20/2018-05-23/"/>
    <id>http://blog.jajabjbj.top/2018/05/20/2018-05-23/</id>
    <published>2018-05-20T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器端渲染程序-demo-图床"><a href="#服务器端渲染程序-demo-图床" class="headerlink" title="服务器端渲染程序 demo 图床"></a>服务器端渲染程序 demo 图床</h2><blockquote><p>Github: <a href="https://github.com/yunqiangwu/jj-image-bed.git">https://github.com/yunqiangwu/jj-image-bed.git</a></p></blockquote><p>基于Webpack工程化解决方案<a href="https://zhuanlan.zhihu.com/p/28322014"><code>easywebpack</code></a>构建项目<br>基于 Egg + React + Webpack3 + 七牛云存储 单页面服务端渲染同构工程图床<code>Demo</code>项目</p><ul><li>Egg 版本： ^2.x.x</li><li>Node 版本: Node ^8.x.x+</li><li>Webpack 版本: ^3.10.0, 对应 <code>easywebpack-react</code> 版本为 3.6.0</li><li>React 版本: ^15.0.0, ^16.0.0, </li><li>qiniu 版本: 7.1.7</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>基于 React 单页面服务端客户端同构实现</p></li><li><p>支持服务端渲染 <code>render</code> 和纯前端渲染 <code>renderClient</code></p></li><li><p>支持 react-router, react-redux 服务端&#x2F;客户端单页面渲染</p></li><li><p>Node 8 版本的 async 和 await 特性, Controller 采用 class 方式编写</p></li><li><p>图片保存到七牛云</p></li><li><p>拖拽上传图片</p></li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li><a href="https://github.com/hubcarl/easywebpack">easywebpack</a> ^3.5.3</li><li><a href="https://github.com/hubcarl/easywebpack-react">easywebpack-react</a> ^3.5.0</li><li><a href="https://github.com/hubcarl/egg-view-react-ssr">egg-view-react-ssr</a> ^2.1.0</li><li><a href="https://github.com/hubcarl/egg-webpack">egg-webpack</a> ^2.4.6</li><li><a href="https://github.com/hubcarl/egg-webpack-react">egg-webpack-react</a> ^2.0.0</li></ul><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15271170207529.jpg"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h5 id="Clone-项目"><a href="#Clone-项目" class="headerlink" title="Clone 项目"></a>Clone 项目</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yunqiangwu/jj-image-bed.git</span><br></pre></td></tr></table></figure><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h5 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>应用访问: <a href="http://127.0.0.1:7001/">http://127.0.0.1:7001</a></p><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15271170561959.png"></p><h5 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 直接运行(编译文件全部在内存里面,本地开发使用)</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">// 编译文件到磁盘打包使用(发布正式环境)</span><br><span class="line">npm run build 或者 easywebpack build prod</span><br></pre></td></tr></table></figure><h5 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h5><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://cdn-qiniu-blog.jajabjbj.top/15271168264465.jpg"></h2><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15271169015438.jpg"></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul><li><input checked="" disabled="" type="checkbox"> 拖拽上传</li><li><input disabled="" type="checkbox"> 粘贴图片</li><li><input disabled="" type="checkbox"> 相册管理</li></ul><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p><a href="LICENSE">MIT</a></p>]]></content>
    
    
    <summary type="html">服务器端渲染程序 demo 图床</summary>
    
    
    
    
    <category term="webpack" scheme="http://blog.jajabjbj.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>《深入浅出NodeJS》 读书学习总结</title>
    <link href="http://blog.jajabjbj.top/2018/05/20/abcd-a-d-asd/"/>
    <id>http://blog.jajabjbj.top/2018/05/20/abcd-a-d-asd/</id>
    <published>2018-05-20T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《深入浅出NodeJS》-读书学习总结"><a href="#《深入浅出NodeJS》-读书学习总结" class="headerlink" title="《深入浅出NodeJS》 读书学习总结"></a>《深入浅出NodeJS》 读书学习总结</h2><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15271197699318.jpg"></p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><ul><li>文档:<ul><li><a href="https://blog.jajabjbj.top/2018/05/10/2018-05-19/">JavaScript异步编程的机制和相关编程技巧</a></li></ul></li><li>项目<ul><li><a href="https://github.com/yunqiangwu/blog/tree/master/code">node 爬虫</a></li><li><a href="https://blog.jajabjbj.top/2018/05/20/2018-05-23/">服务器端渲染程序 demo 图床</a></li></ul></li></ul><h3 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h3><ul><li>NodeJS 5个特点：异步I&#x2F;O,事件驱动与回调，单线程事件轮询，跨平台。</li><li>NodeJS 5个大坑：异常处理，嵌套太深，没有Sleep，多线程编程，异步转同步。</li><li>NodeJS 4种提升性能的方法：动静分离，缓存（Redis）,多进程，数据库读写分离。</li></ul><h4 id="NodeJS简介"><a href="#NodeJS简介" class="headerlink" title="NodeJS简介"></a>NodeJS简介</h4><ul><li>高性能，符合时间驱动，没有历史包袱这三个主要原因，JavaScript成为了Node的实现语言。</li><li>NodeJS基于Google V8引擎。Node优秀的运算能力主要来自V8的深度优化。</li><li>NodeJS特点：异步I&#x2F;O,事件驱动与回调函数，单线程事件轮询，跨平台</li><li>NodeJS单线程的缺点：<ul><li>无法利用多核CPU.</li><li>错误会引起整个应用进程退出。</li><li>大量计算占用CPU导致无法继续调用异步I&#x2F;O.</li><li>解决单线程缺点的方法是引入子进程方法（Cluster,见后边）和C&#x2F;C++模块扩展（利用它们的多线程机制）。</li></ul></li></ul><h4 id="模块机制"><a href="#模块机制" class="headerlink" title="模块机制"></a>模块机制</h4><ul><li>Node出现之前，服务器端的JS基本没有市场的。</li><li>CommonJS主要是为了弥补当前JS没有标准的缺陷，希望JS能够在任何地方运行。</li></ul><h5 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h5><p><code>var xxx = require(‘模块标识’);</code></p><p>例如：<code>var math = require(‘math’);</code></p><h5 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h5><p>模块中module对象代表模块自身，exports对象是module的属性，用于导出当前模块的方法或者变量，它是唯一导出的出口。module和exports是node在编译过程中给加上去的。</p><p>NodeJS中，一个文件就是一个模块，将方法或者变量挂在在exports对象上作为属性即可定义导出的方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">exports.xxx = ……</span><br><span class="line"></span><br><span class="line">例如： exports.add = function()&#123;</span><br><span class="line"></span><br><span class="line">var sum = 0;</span><br><span class="line"></span><br><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">….</span><br><span class="line"></span><br><span class="line">return sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（exports和module.exports区别见后）</p><h5 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h5><p>就是传给require()的参数。它必须符合小驼峰命名的字符串，或者以。，。。开头的相对路径，或者绝对路径。可以有或者没有文件后缀名（最好有后缀，p&#x2F;17）.</p><p>模块标识分类:</p><ul><li>核心模块，如http, fs, path等。</li><li>.或者..开始的相对路径文件模块。</li><li>以&#x2F;开始的绝对路径文件模块。</li><li>非路径形式的文件模块，如自定义的connect模块。</li></ul><h5 id="Node中引入模块步骤"><a href="#Node中引入模块步骤" class="headerlink" title="Node中引入模块步骤"></a>Node中引入模块步骤</h5><p>（找文件-&gt;找文件扩展名-&gt;编译执行）</p><ol><li>路径分析：定位文件位置，标识符中有路径，甚至没有。</li><li>文件定位：标识符中没有文件扩展名，所以需要确定类型。</li><li>编译执行：不同文件类型，载入方式不一样。</li></ol><h5 id="Node中模块分类"><a href="#Node中模块分类" class="headerlink" title="Node中模块分类"></a>Node中模块分类</h5><ol><li>核心模块（Node提供）：核心模块在Node源代码的编译过程中，编译进了二进制文件，在Node进程启动时，部分核心模块就被加载进内存中，所以这部分核心模块引入时，文件定位和编译执行两步省略掉，且在路径分析时优先判断，所以核心模块加载速度是最快的。</li><li>文件模块（用户编写）：在运行时动态加载，三步骤都需要。<br>Node对引用过的模块都会进行缓存，以减少二次引入时的开销。</li></ol><h5 id="模块路径分析策略"><a href="#模块路径分析策略" class="headerlink" title="模块路径分析策略"></a>模块路径分析策略</h5><p>即node在定位文件模块的具体文件时指定的查找策略。其策略是从当前node-modules开始一级一级向根的node-modules查找，核心模块最快，相对、绝对路径模块次之，自定义文件模块最慢。<br>所以引用模块时，最好加上路径以及扩展名！</p><h5 id="文件定位策略"><a href="#文件定位策略" class="headerlink" title="文件定位策略"></a>文件定位策略</h5><ul><li>因为模块标识符中可以不包含文件扩展名，在这种情况下，Node会按照.js, .json, .node的次序补足扩展名，依次尝试。在尝试的过程中，需要调fs模块的同步阻塞式的判断文件是否存在，所以最好传入文件扩展名。</li><li>require（）通过分析文件扩展之后，可能没找到对应的文件，但却得到了一个目录，此时node会将目录当做一个包来出来（node对包处理会遵守CommonJS包规范）。</li><li>Node中，每个文件模块都是一个对象，定位到具体的文件后，Node会新建一个模块对象，然后根据路径载入并编译。不同的文件扩展名，其载入和编译的方法也不一样：</li><li>.js文件：通过fs模块同步读取文件后编译执行。</li><li>.node文件：这是C&#x2F;C++编写的扩展文件，通过process.dlopen（）方法加载和执行。它不需要编译，因为它是编写C&#x2F;C++模块之后编译生成的. C&#x2F;C++带来的优势主要是执行效率方面的。</li><li>.json文件：通过fs模块同步读取文件后，用JSON.parse()解析返回结果。</li><li>.其余扩展名文件：当做.js文件处理。</li><li>JS模块中require, exports, module这三个变量在模块中并没有定义，是node在编译过程中给加上的，这样每个模块中这三个变量的作用域是隔离的。</li><li>exports和module.exports区别：</li><li>exports指向module.exports的引用, require（）返回的是module.exports而不是exports.如果module.exports指向了一个新对象则exports则断开了对module.exports的引用。刚开始module.exports为空对象，所以exports收集的属性和方法都赋给module.exports，而一旦module.exports有了属性，方法，则exports收集的信息将被忽略，所以在不调用module.exports时，采用exports.</li><li>Node的核心模块在编译成可执行文件的过程中被编译进了二进制文件。核心模块分为C&#x2F;C++编写的和JS编写的两部分。而在编译所有的C&#x2F;C++文件之前，编译程序需要将所有的JS模块文件编译为C&#x2F;C++代码。</li></ul><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>包和NPM是将模块联系起来的一种机制</p><p>包组织模块示意图：<br><img src="http://cdn-qiniu-blog.jajabjbj.top/15271192559496.jpg"><br>包实际上是一个存档文件，即一个目录直接打包为.zip，安装解压还原为目录。</p><h5 id="包结构："><a href="#包结构：" class="headerlink" title="包结构："></a>包结构：</h5><ul><li>package.json:包描述文件。（详细说明p&#x2F;35）</li><li>bin:用于存放可执行二进制文件的目录。</li><li>Lib:用于存放js代码的目录。</li><li>Doc:存放文档的目录。</li><li>Test:存放单元测试用例的代码。</li></ul><h4 id="产品化"><a href="#产品化" class="headerlink" title="产品化"></a>产品化</h4><h5 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h5><p>构建工具完成的功能主要是合并静态文件，压缩文件大小，打包应用，编译模块等。Grunt是跨平台的构建工具，它通过Node写成，借助Node的跨平台能力，实现了很好的平台兼容性。<br>代码检测工具JSLint<br>可以通过gitlab等开源工具搭建了内部的代码托管平台。</p><h5 id="Node提升性能的4个方法："><a href="#Node提升性能的4个方法：" class="headerlink" title="Node提升性能的4个方法："></a>Node提升性能的4个方法：</h5><ol><li>动静分离：node处理静态文件的能力不算突出。将图片，脚本，样式表和多媒体等静态文件都导入到专业的静态文件服务器（比如Nginx）上,让node只处理动态请求即可。</li><li>启用缓存Redis或Memcached.</li><li>多进程架构– cluster模块。</li><li>数据库读写分离：就任意数据库而言，读取的速度远远高于写入的速度。而某些数据库在写入时为了保证数据一致性，会进行锁表操作，这同时会影响到读取的速度。为了提升性能，通常会进行数据库的读写分离，将数据库进行主从设计。这样读数据操作不再受写入的影响了。</li></ol><h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>在node中可用connect提供的日志中间件来记录访问日志，当然我们可以在Nginx反向代理里记录访问日志。<br>异常日志的实现：p&#x2F;296-298<br>Node通过nodemailer模块实现邮件报警。</p><h4 id="调试NodeJS"><a href="#调试NodeJS" class="headerlink" title="调试NodeJS"></a>调试NodeJS</h4><p>Node调试可用三种方法：Debugger, console.log()和Node-Inspector<br>Debugger:需要通过debugger;语句在代码中设置断点。使用方法p&#x2F;310 - 311<br>Node-Insepector:可在浏览器中进行调试 或者公共idea 工具调试。</p><h4 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h4><ul><li>缩进：采用两个空格而不是Tab</li><li>变量声明：永远用var声明变量</li><li>空格：操作符前后需要加空格</li><li>单双引号的使用：尽量使用单引号，这样无需转译</li><li>大括号的位置：大括号{无需另起一行</li><li>逗号：如果逗号不在行结尾，后面需要一个空格</li><li>分号：给表达式结尾添加分号</li><li>变量命名：小驼峰式</li><li>方法命名：小驼峰式</li><li>类命名：大驼峰式</li><li>常量命名：所有字母大写，以下划线分割</li><li>文件命名：采用下划线分割单词</li></ul><hr>]]></content>
    
    
    <summary type="html">深入浅出NodeJS</summary>
    
    
    
    
    <category term="nodejs" scheme="http://blog.jajabjbj.top/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript异步编程的机制和相关编程技巧</title>
    <link href="http://blog.jajabjbj.top/2018/05/10/2018-05-19/"/>
    <id>http://blog.jajabjbj.top/2018/05/10/2018-05-19/</id>
    <published>2018-05-10T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript异步编程的机制和相关编程技巧"><a href="#JavaScript异步编程的机制和相关编程技巧" class="headerlink" title="JavaScript异步编程的机制和相关编程技巧"></a>JavaScript异步编程的机制和相关编程技巧</h2><h3 id="JavaScript异步编程机制"><a href="#JavaScript异步编程机制" class="headerlink" title="JavaScript异步编程机制"></a>JavaScript异步编程机制</h3><p>JavaScript异步编程机制简单来说就是 callback 机制实现的效果。callback形式的代码写复杂的异步编程，很容易出现callback地狱的问题，不利于代码的维护和管理，而Promise和es6的async可以很好的解决这个问题，使得写异步编程编的非常简单。</p><h4 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h4><p>简单来说，Promise 主要就是为了解决异步回调的问题。用 Promise 来处理异步回调使得代码层次清晰，便于理解，且更加容易维护。其主流规范目前主要是 <a href="http://promisesaplus.com/">Promises&#x2F;A+</a> 。<br>Promise 原理大概就类似这个样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.1.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callback;</span><br><span class="line">    <span class="keyword">let</span> rejectCallback;</span><br><span class="line">    <span class="comment">//一个实例的方法，用来注册异步事件</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">done, errCallback</span>) &#123;</span><br><span class="line">        callback = done;</span><br><span class="line">        rejectCallback = errCallback;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">fn</span>(resolve);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">rejectCallback</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout3</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(timeout3).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// # console: </span></span><br><span class="line"><span class="comment">// 3 (三秒后屏幕出现 )</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里只是简单的模拟一下Promise的代码，还有一下Promise的api没有全部实现，可以去深入研究Promise的源码，搞懂 Promise的 实现原理，能改使用Promise编程更加得心应手的.</p><h3 id="使用Promise封装-node-的-http-request方法，实现简单的-fetch-api-效果"><a href="#使用Promise封装-node-的-http-request方法，实现简单的-fetch-api-效果" class="headerlink" title="使用Promise封装 node 的 http.request方法，实现简单的 fetch api 效果"></a>使用<code>Promise</code>封装 node 的 <code>http.request</code>方法，实现简单的 <code>fetch</code> api 效果</h3><h4 id="封装fetch-API"><a href="#封装fetch-API" class="headerlink" title="封装fetch API"></a>封装<code>fetch</code> API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.2.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetch</span> = (<span class="params">url,fetchOptions = &#123;&#125;</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> match = <span class="regexp">/((http|ftp|https):\/\/)((([a-zA-Z0-9\._-]+\.[a-zA-Z]&#123;2,6&#125;)|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;))(:[0-9]&#123;1,4&#125;)*(\/[a-zA-Z0-9\&amp;\%_\.\/-~-]*)?)/</span>;</span><br><span class="line">        <span class="keyword">const</span> matchObj = match.<span class="title function_">exec</span>(url);</span><br><span class="line">        <span class="keyword">if</span>(!matchObj)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(&#123;</span><br><span class="line">                <span class="attr">message</span>: url+<span class="string">&#x27;域名格式不正确&#x27;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> [,,,,,hostname,,,,path] = matchObj;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            hostname,</span><br><span class="line">            path,</span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="keyword">var</span> req = http.<span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> chunks = [];</span><br><span class="line">        </span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">                chunks.<span class="title function_">push</span>(chunk);</span><br><span class="line">            &#125;);</span><br><span class="line">        </span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;)</span><br><span class="line">        </span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> body = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(chunks);</span><br><span class="line">                <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                    <span class="attr">json</span>:<span class="function">()=&gt;</span><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(body.<span class="title function_">toString</span>())),</span><br><span class="line">                    <span class="attr">blob</span>: <span class="function">()=&gt;</span><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(body),</span><br><span class="line">                    <span class="attr">text</span>: <span class="function">()=&gt;</span><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(body.<span class="title function_">toString</span>()),</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        req.<span class="title function_">end</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单的调用fetch"><a href="#简单的调用fetch" class="headerlink" title="简单的调用fetch"></a>简单的调用<code>fetch</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://www.mmjpg.com/&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>data.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">str</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 输出网页源码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="fetch链式调用"><a href="#fetch链式调用" class="headerlink" title="fetch链式调用"></a><code>fetch</code>链式调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.3.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;./demo.2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://www.mmjpg.com/&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="regexp">/(http:\/\/www.mmjpg.com\/mm\/\d+)/</span>.<span class="title function_">exec</span>(content)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>data.<span class="title function_">text</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123; </span><br><span class="line">                <span class="keyword">const</span> n = <span class="regexp">/var\s*picinfo\s*=\s*\[(\d+),(\d+),(\d+),(\d+)\]/</span>.<span class="title function_">exec</span>(data)[<span class="number">3</span>];</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;<span class="attr">length</span>: n&#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> url+<span class="string">&#x27;/&#x27;</span>+(index+<span class="number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">imageUrls</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(imageUrls);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// # console:</span></span><br><span class="line"><span class="comment">// 60</span></span><br><span class="line"><span class="comment">// [ &#x27;http://www.mmjpg.com/mm/1355/1&#x27;,</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">//   &#x27;http://www.mmjpg.com/mm/1355/59&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;http://www.mmjpg.com/mm/1355/60&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="fetch按顺序批量获取url内容"><a href="#fetch按顺序批量获取url内容" class="headerlink" title="fetch按顺序批量获取url内容"></a><code>fetch</code>按顺序批量获取url内容</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.4.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;./demo.2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> imgUrls = [<span class="string">&#x27;http://www.mmjpg.com/mm/1355/1&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/2&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/3&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/4&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/7&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/8&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/57&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/58&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/59&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/60&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchImg</span> = (<span class="params">urls, index=<span class="number">0</span>, currentResult = []</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = urls[index];</span><br><span class="line">    <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="title function_">blob</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Progress: &#x27;</span> + index + <span class="string">&#x27;/&#x27;</span> + urls.<span class="property">length</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">fetchImg</span>(urls, index + <span class="number">1</span>, [...currentResult, buffer])</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(currentResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchImg</span>(imgUrls)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">bufferList</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// save imgBuffer to file...</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bufferList.<span class="property">length</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// console: </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Progress: 0/60</span></span><br><span class="line"><span class="comment">Progress: 1/60</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">Progress: 58/60</span></span><br><span class="line"><span class="comment">Progress: 59/60</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="使用异步编程Promise-all优化后的效果"><a href="#使用异步编程Promise-all优化后的效果" class="headerlink" title="使用异步编程Promise.all优化后的效果"></a>使用异步编程<code>Promise.all</code>优化后的效果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.5.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;./demo.2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> imgUrls = [<span class="string">&#x27;http://www.mmjpg.com/mm/1355/1&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/2&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/3&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/4&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/5&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/6&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/57&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/58&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/59&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/60&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(imgUrls.<span class="title function_">map</span>(<span class="function"><span class="params">url</span>=&gt;</span><span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>data.<span class="title function_">blob</span>())))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">bufferList</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// save imgBuffer to file...</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bufferList.<span class="property">length</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="es6中async使用-Promise-all"><a href="#es6中async使用-Promise-all" class="headerlink" title="es6中async使用 Promise.all"></a>es6中async使用 Promise.all</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// demo.6.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;./demo.2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> imgUrls = [<span class="string">&#x27;http://www.mmjpg.com/mm/1355/1&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/2&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/3&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/4&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/5&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/6&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/7&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/8&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/9&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/10&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/11&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/12&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/13&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/14&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/15&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/16&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/17&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/18&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/19&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/20&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/21&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/22&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/23&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/24&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/25&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/26&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/27&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/28&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/29&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/30&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/31&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/32&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/33&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/34&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/35&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/36&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/37&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/38&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/39&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/40&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/41&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/42&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/43&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/44&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/45&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/46&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/47&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/48&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/49&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/50&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/51&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/52&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/53&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/54&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/55&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/56&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/57&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/58&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/59&#x27;</span>, <span class="string">&#x27;http://www.mmjpg.com/mm/1355/60&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  <span class="title function_">fetAllData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> bufferList = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(imgUrls.<span class="title function_">map</span>(<span class="function"><span class="params">url</span>=&gt;</span><span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>data.<span class="title function_">blob</span>())));</span><br><span class="line">    <span class="comment">// save imgBuffer to file...</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bufferList.<span class="property">lenght</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetAllData</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JavaScript异步编程的机制和相关编程技巧</summary>
    
    
    
    
    <category term="javascript" scheme="http://blog.jajabjbj.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>用 jest + gitlab-ci 搭建前端UI自动化测试环境</title>
    <link href="http://blog.jajabjbj.top/2018/05/09/2018-05-21/"/>
    <id>http://blog.jajabjbj.top/2018/05/09/2018-05-21/</id>
    <published>2018-05-09T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用-jest-gitlab-ci-搭建前端UI自动化测试环境"><a href="#用-jest-gitlab-ci-搭建前端UI自动化测试环境" class="headerlink" title="用 jest + gitlab-ci 搭建前端UI自动化测试环境"></a>用 jest + gitlab-ci 搭建前端UI自动化测试环境</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>下面以 github创建仓库为例 测试领域中比较麻烦的就是前端UI测试<br>gitlab地址： <a href="https://gitlab.com/yunqiangwu/devops-test.git">https://gitlab.com/yunqiangwu/devops-test.git</a></p><h4 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h4><ul><li>拥有gitlab账号(公司内部的也可以)</li><li>gitlab 已经配置了 CI Runner(具体方法百度)</li></ul><h4 id="功能实现效果"><a href="#功能实现效果" class="headerlink" title="功能实现效果"></a>功能实现效果</h4><ul><li>修改过测试用例后push触发自动测试</li><li>测试完成后生成测试报告</li><li>测试报告部署到 git pages 上</li><li>发送邮件通知测试结果，以及报告查看链接</li></ul><p>先看下我在实际项目中的效果，下面是我收到的自动化测试完成后的邮件：<br><img src="http://cdn-qiniu-blog.jajabjbj.top/15268391312100.jpg"></p><blockquote><p><a href="http://preview.ant.jajabjbj.top/index.html">预览地址</a><br><a href="http://preview.ant.jajabjbj.top/test-report/reporter.html">自动化测试报告</a><br><a href="http://preview.ant.jajabjbj.top/coverage/lcov-report/index.html">测试覆盖率报告</a>  </p></blockquote><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> devops-test</span><br><span class="line"><span class="built_in">cd</span> devops-test</span><br><span class="line">npm init <span class="comment"># 初始化 `node` 项目 </span></span><br><span class="line"><span class="comment"># 这里会要你输入信息，节约时间，一路回车</span></span><br><span class="line"><span class="comment"># 下面的操作我用的是cnpm </span></span><br><span class="line">cnpm i jest jest-report nightmare --save</span><br><span class="line">cnpm i babel-jest babel-plugin-import babel-plugin-transform-class-properties babel-plugin-transform-decorators-legacy babel-plugin-transform-runtime </span><br><span class="line"> babel-preset-env --save-dev</span><br><span class="line"><span class="comment">#  </span></span><br></pre></td></tr></table></figure><p>重点依赖库介绍： </p><ul><li>jest 测试框架</li><li>nightmare 浏览器运行库</li><li>jest-report 测试报告生产库</li></ul><h3 id="配置jest环境"><a href="#配置jest环境" class="headerlink" title="配置jest环境"></a>配置jest环境</h3><ol><li>在 <code>package.json</code> 的 <code>scripts</code> 中叫如 test 命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;devops-test&quot;</span>,</span><br><span class="line">      <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;jest e2e.js&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建<code>jasmine</code>配置文件 <code>项目根目录/tests/jasmine.js</code> 配置测试超时时间</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jasmine.<span class="property">DEFAULT_TIMEOUT_INTERVAL</span> = <span class="number">12000</span>; <span class="comment">// 只有这一行内容</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>package.json</code> 中添加两个字段 <code>babel</code> 和 <code>jest</code> ,这样就能跑 es6 的代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;devops-test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;env&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;transform-decorators-legacy&quot;</span>,</span><br><span class="line">      <span class="string">&quot;transform-class-properties&quot;</span>,</span><br><span class="line">      <span class="string">&quot;transform-es2015-destructuring&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;jest&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;testResultsProcessor&quot;</span>: <span class="string">&quot;jest-report&quot;</span>,</span><br><span class="line">    <span class="string">&quot;setupTestFrameworkScriptFile&quot;</span>: <span class="string">&quot;&lt;rootDir&gt;/tests/jasmine.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;testMatch&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;**/?(*.)(spec|test|e2e).js?(x)&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h3><p>测试<code>github</code>登录功能<code>&lt;rootDir&gt;/src/e2e/test-github-login.e2e.js</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Nightmare</span> <span class="keyword">from</span> <span class="string">&#x27;nightmare&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; helperBuilder &#125; <span class="keyword">from</span> <span class="string">&#x27;jest-report&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Login&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> page;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        page = <span class="title class_">Nightmare</span>(&#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;).<span class="title function_">viewport</span>(<span class="number">1024</span>, <span class="number">768</span>);</span><br><span class="line">        page.<span class="title function_">goto</span>(<span class="string">&#x27;https://github.com/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// afterEach(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     if(page)&#123;</span></span><br><span class="line">    <span class="comment">//       page.halt();</span></span><br><span class="line">    <span class="comment">//       page = null;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should login with failure&#x27;</span>, <span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> reportHelper = <span class="title function_">helperBuilder</span>(<span class="string">&#x27;Login&#x27;</span>, <span class="string">&#x27;should login with failure&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        reportHelper.<span class="title function_">monitorPage</span>(page);</span><br><span class="line">        <span class="keyword">await</span> page</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&#x27;#login_field&#x27;</span>, <span class="string">&#x27;mockuser&#x27;</span>)</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&#x27;#password&#x27;</span>, <span class="string">&#x27;wrong_password&#x27;</span>)</span><br><span class="line">            .<span class="title function_">click</span>(<span class="string">&#x27;input[type=&quot;submit&quot;]&#x27;</span>)</span><br><span class="line">            .<span class="title function_">wait</span>(<span class="string">&#x27;#js-flash-container &gt; div &gt; div&#x27;</span>); <span class="comment">// should display error</span></span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(reportHelper.<span class="title function_">genPicturePath</span>());</span><br><span class="line">        <span class="keyword">const</span> text = <span class="keyword">await</span> page.<span class="title function_">wait</span>(<span class="string">&#x27;#js-flash-container &gt; div &gt; div&#x27;</span>)</span><br><span class="line">            .evaluate(<span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span>)</span><br><span class="line">            .<span class="title function_">end</span>();</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">end</span>();</span><br><span class="line">        <span class="title function_">expect</span>(text).<span class="title function_">toContain</span>(<span class="string">&#x27;Incorrect username or password&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should login successfully&#x27;</span>, <span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> reportHelper = <span class="title function_">helperBuilder</span>(<span class="string">&#x27;Login&#x27;</span>, <span class="string">&#x27;should login successfully&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        reportHelper.<span class="title function_">monitorPage</span>(page);</span><br><span class="line">        <span class="keyword">await</span> page</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&#x27;#login_field&#x27;</span>, <span class="string">&#x27;正确用户名&#x27;</span>)</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&#x27;#password&#x27;</span>, <span class="string">&#x27;正确密码&#x27;</span>)</span><br><span class="line">            .<span class="title function_">click</span>(<span class="string">&#x27;input[type=&quot;submit&quot;]&#x27;</span>)</span><br><span class="line">            .<span class="title function_">wait</span>(<span class="string">&#x27;#your_repos &gt; div &gt; div.boxed-group-action &gt; a&#x27;</span>); <span class="comment">// should display error</span></span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(reportHelper.<span class="title function_">genPicturePath</span>());</span><br><span class="line">        <span class="keyword">const</span> title = <span class="keyword">await</span> page</span><br><span class="line">            .evaluate(<span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="property">title</span>)</span><br><span class="line">            .<span class="title function_">end</span>();</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">end</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">expect</span>(title).<span class="title function_">toBe</span>(<span class="string">&#x27;GitHub&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行测试生成测试报告"><a href="#运行测试生成测试报告" class="headerlink" title="运行测试生成测试报告"></a>运行测试生成测试报告</h3><h4 id="1-执行命令npm-test，运行测试脚步"><a href="#1-执行命令npm-test，运行测试脚步" class="headerlink" title="1. 执行命令npm test，运行测试脚步"></a>1. 执行命令<code>npm test</code>，运行测试脚步</h4><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15268391890150.jpg"></p><h4 id="2-生成测试报告"><a href="#2-生成测试报告" class="headerlink" title="2. 生成测试报告"></a>2. 生成测试报告</h4><pre><code>生成的文件路径默认是 `&lt;rootDir&gt;/dist/test-report` </code></pre><h4 id="3-测试报告效果"><a href="#3-测试报告效果" class="headerlink" title="3. 测试报告效果"></a>3. 测试报告效果</h4><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15268392221344.jpg"></p><p><img src="http://cdn-qiniu-blog.jajabjbj.top/15268392395160.jpg"></p><h3 id="添加项目到gitlab"><a href="#添加项目到gitlab" class="headerlink" title="添加项目到gitlab"></a>添加项目到gitlab</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://gitlab.com/yunqiangwu/devops-test.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加到持续集成"><a href="#添加到持续集成" class="headerlink" title="添加到持续集成"></a>添加到持续集成</h3><p>自动部署测试报告 到gitlab pages 网页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i --save-dev gh-pages</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 添加<code> scripts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;jest e2e.js&quot;,</span><br><span class="line">  &quot;site&quot;: &quot;gh-pages -d dist&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> 配置邮件通知工具<br> <code>&lt;rootDir&gt;/tool/emailnotice.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">MAIL_FROM=<span class="string">&#x27;supportman@yeah.net&#x27;</span></span><br><span class="line"><span class="comment"># [[ $MAIL_TO == &quot;&quot; ]] &amp;&amp; export MAIL_TO=$1</span></span><br><span class="line">MAIL_TO_ARR_ARG=<span class="variable">$1</span></span><br><span class="line">MAIL_SUBJECT=<span class="variable">$2</span></span><br><span class="line"><span class="built_in">shift</span> 2</span><br><span class="line">MAIL_CONTENT=$*</span><br><span class="line">MAIL_CONTENT_FILE=<span class="string">&quot;/tmp/`/bin/date +%s`.txt&quot;</span></span><br><span class="line">MAIL_SMTP=<span class="string">&#x27;smtp://smtp.yeah.net&#x27;</span></span><br><span class="line">MAIL_USER=<span class="string">&#x27;supportman@yeah.net&#x27;</span></span><br><span class="line">MAIL_PASSWORD=<span class="string">&#x27;wu950429&#x27;</span></span><br><span class="line"></span><br><span class="line">OLD_IFS=<span class="string">&quot;<span class="variable">$IFS</span>&quot;</span></span><br><span class="line"><span class="comment">#设置分隔符</span></span><br><span class="line">IFS=<span class="string">&quot;,&quot;</span></span><br><span class="line">MAIL_TO_ARR=(<span class="variable">$MAIL_TO_ARR_ARG</span>)</span><br><span class="line">IFS=<span class="string">&quot;<span class="variable">$OLD_IFS</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">split_1</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  MAIL_TO=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;发送邮件到：&quot;</span><span class="variable">$1</span></span><br><span class="line">  <span class="comment">#  return 0;</span></span><br><span class="line">  <span class="comment"># create mail content file</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;From:<span class="variable">$&#123;MAIL_FROM&#125;</span></span></span><br><span class="line"><span class="string">To:<span class="variable">$MAIL_TO</span></span></span><br><span class="line"><span class="string">Subject: <span class="variable">$MAIL_SUBJECT</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$MAIL_CONTENT</span></span></span><br><span class="line"><span class="string">&quot;</span>&gt; <span class="variable">$&#123;MAIL_CONTENT_FILE&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># send mail</span></span><br><span class="line">  curl -s --url <span class="string">&quot;<span class="variable">$&#123;MAIL_SMTP&#125;</span>&quot;</span> --mail-from <span class="string">&quot;<span class="variable">$&#123;MAIL_FROM&#125;</span>&quot;</span> --mail-rcpt <span class="variable">$&#123;MAIL_TO&#125;</span> --upload-file <span class="variable">$&#123;MAIL_CONTENT_FILE&#125;</span> --user <span class="string">&quot;<span class="variable">$&#123;MAIL_USER&#125;</span>:<span class="variable">$&#123;MAIL_PASSWORD&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable">$&#123;MAIL_TO_ARR[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">split_1 <span class="string">&quot;<span class="variable">$s</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;MAIL_CONTENT_FILE&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gitlab-ci.yml 配置文件  <code>.gitlab-ci.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">jonneywu/node-xvfb-cnpm</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_REPOSITORY_URL&quot;</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">email</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">   <span class="attr">script:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">!</span> <span class="string">-d</span> <span class="string">node_modules</span> ]<span class="string">;</span> <span class="string">then</span> <span class="string">cnpm</span> <span class="string">i;</span> <span class="string">fi</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">!</span> <span class="string">-d</span> <span class="string">node_modules/nightmare</span> ]<span class="string">;</span> <span class="string">then</span> <span class="string">cnpm</span> <span class="string">i</span> <span class="string">nightmare;</span> <span class="string">fi</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">export</span> <span class="string">DISPLAY=&#x27;:99.0&#x27;</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">Xvfb</span> <span class="string">:99</span> <span class="string">-screen</span> <span class="number">0</span> <span class="string">1024x768x24</span> <span class="string">&gt;</span> <span class="string">/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">&amp;</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span> <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">test</span> <span class="string">FAIL</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">kill</span> <span class="number">-9</span> <span class="string">`ps</span> <span class="string">-ef</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">Xvfb|</span> <span class="string">grep</span> <span class="string">-v</span> <span class="string">grep|awk</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span><span class="string">`</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">site</span></span><br><span class="line">   <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">   <span class="attr">only:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">   <span class="attr">artifacts:</span></span><br><span class="line">     <span class="attr">paths:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line"><span class="attr">email:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">email</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [[ <span class="string">!</span> <span class="string">-n</span> <span class="string">$MAIL_TO</span> ]]<span class="string">;</span> <span class="string">then</span> <span class="string">export</span> <span class="string">MAIL_TO=842269153@qq.com,yunqiang.wu@hand-china.com</span> <span class="string">;</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">root_url=http://`cat</span> <span class="string">CNAME`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">test_passed_rate=$(printf</span> <span class="string">&quot;%.2f&quot;</span> <span class="string">`cat</span> <span class="string">dist/test-report/testResultData.json</span> <span class="string">|</span> <span class="string">jq</span> <span class="string">&#x27;100*.numPassedTests/.numTotalTests&#x27;</span><span class="string">`)%</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash</span> <span class="string">./tool/emailnotice.sh</span> <span class="string">$MAIL_TO</span> <span class="string">&#x27;前端自动化测试&#x27;</span> <span class="string">`echo</span> <span class="string">-e</span> <span class="string">&quot;  测试分支： $&#123;CI_COMMIT_REF_NAME&#125; \r\n 提交人：$&#123;GITLAB_USER_NAME&#125; \r\n 测试通过率：$&#123;test_passed_rate&#125; \r\n 触发来源：$&#123;CI_PIPELINE_SOURCE&#125; \r\n 测试环境：mockApi环境 \r\n\r\n预览地址： $&#123;root_url&#125;/index.html \r\n 自动化测试报告：$&#123;root_url&#125;/test-report/reporter.html \r\n 测试覆盖率报告： $&#123;root_url&#125;/coverage/lcov-report/index.html \r\n&quot;</span><span class="string">`</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">email</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>react 开发是如果用了<code>css modules</code>的技术开发时，会把 class 名换掉 ，测试框架就无法通过 <code>css selector</code> 找到并操作 Dom元素，在开发时，可以为主要控制的dom节点给<code>id</code>，<code>data-custom</code> 自定义属性，比如用户名输入框、登录按钮，</li><li>我这里的介绍的自动化测试，只是测试系统的功能交互是否能正常，如果需要靠自动化测试来判断UI界面的样式对比是符合要求，可能还是要靠人力测试，不过测试的目的保证系统功能成正常使用不出BUG。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.zhihu.com/question/29922082/answer/46141819">如何进行前端自动化测试？ - 知乎</a></li><li><a href="http://ant.jajabjbj.top/docs/ui-test-cn">ANT DESIGN PRO 中的 UI 测试</a></li></ul>]]></content>
    
    
    <summary type="html">用 jest + gitlab-ci 搭建前端UI自动化测试环境</summary>
    
    
    
    
    <category term="gitab-ci" scheme="http://blog.jajabjbj.top/tags/gitab-ci/"/>
    
  </entry>
  
  <entry>
    <title>webpack引入第三方库方案总结</title>
    <link href="http://blog.jajabjbj.top/2018/05/08/2018-05-21-1/"/>
    <id>http://blog.jajabjbj.top/2018/05/08/2018-05-21-1/</id>
    <published>2018-05-08T00:00:00.000Z</published>
    <updated>2022-07-15T16:13:40.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack引入第三方库方案总结"><a href="#webpack引入第三方库方案总结" class="headerlink" title="webpack引入第三方库方案总结"></a>webpack引入第三方库方案总结</h2><blockquote><p>在使用webpack打包项目时，最好尽量使用import的方式引入第三方库，但有些情况又必须使用其他方式引入第三方库…</p></blockquote><h3 id="要项目上必须要用一个-jQuery-插件形式的库"><a href="#要项目上必须要用一个-jQuery-插件形式的库" class="headerlink" title="要项目上必须要用一个 jQuery 插件形式的库"></a>要项目上必须要用一个 jQuery 插件形式的库</h3><p>而引入这个库之前必须要引入jQuery，因为插件里面可能会出现这样的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> jQuery = <span class="variable language_">window</span>.<span class="property">jQuery</span>,</span><br><span class="line">\\ ...</span><br><span class="line">\\ ...</span><br><span class="line"><span class="keyword">if</span> (!jQuery) <span class="keyword">throw</span> <span class="string">&#x27;MathQuill requires jQuery 1.4.3+ to be loaded first&#x27;</span>;</span><br><span class="line">\\ ...</span><br><span class="line">\\ ...</span><br><span class="line">\\ ...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>所以需要在webpack构建的项目中引入 第三方 js库，一般情况下引入第三方库有以下几种方式</p><h4 id="直接引入"><a href="#直接引入" class="headerlink" title="直接引入"></a>直接引入</h4><p>直接引入的关键在于输出的配置，这里以var为例，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> output <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      filename <span class="punctuation">:</span> &#x27;<span class="punctuation">[</span>name<span class="punctuation">]</span>.js&#x27;<span class="punctuation">,</span></span><br><span class="line">       <span class="comment">//  devServer不可配置为绝对路径</span></span><br><span class="line">       <span class="comment">//publicPath: &quot;http://localhost:8080/dist/&quot;,</span></span><br><span class="line">       publicPath<span class="punctuation">:</span> <span class="string">&quot;/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">       path <span class="punctuation">:</span> build<span class="punctuation">,</span></span><br><span class="line">       <span class="comment">//  umd包含了对amd、commonjs、var等多种规范的支持</span></span><br><span class="line">       <span class="comment">//   关键在于这里  </span></span><br><span class="line">       libraryTarget <span class="punctuation">:</span> &#x27;var&#x27;  </span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line"><span class="comment">//  其他配置略</span></span><br><span class="line"> resolve<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//extensions: [&#x27;&#x27;, &#x27;.js&#x27;, &#x27;.es6&#x27;, &#x27;.vue&#x27;],</span></span><br><span class="line">        alias<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">//  也可以不写</span></span><br><span class="line">            jquery<span class="punctuation">:</span> &#x27;jquery/dist/jquery.min.js&#x27;<span class="punctuation">,</span>  </span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样，在编译代码时，webpack会自动将jQuery打进代码，现在就可以引入代码了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接引入jquery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"><span class="comment">// 因为是commonjs规范，所以会按顺序加载，引用成功，如果是output为amd，则必须在requirejs中配置shim，否则失败</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;jquery-ui&#x27;</span> </span><br></pre></td></tr></table></figure><h4 id="2-ProvidePlugin-难以引入插件"><a href="#2-ProvidePlugin-难以引入插件" class="headerlink" title="2. ProvidePlugin[难以引入插件]"></a>2. ProvidePlugin[难以引入插件]</h4><p>在webpack中添加插件ProvidePlugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">$</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">      <span class="attr">jQuery</span>: <span class="string">&quot;jquery&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line"><span class="comment">//  $函数会自动添加到当前模块的上下文，无需显示声明</span></span><br></pre></td></tr></table></figure><p>问题是依旧没有全局的$函数，所以导入插件依旧会失败，并且如果有eslint这样的preLoads，调用语句也难以通过语法校验(因为没有声明$就直接使用)，仅这一点，对于我这样的代码处女座就难以接受。</p><h4 id="3-expose-loader-推荐使用"><a href="#3-expose-loader-推荐使用" class="headerlink" title="3. expose-loader[推荐使用]"></a>3. expose-loader[推荐使用]</h4><p>不需要任何其他的插件配合，只要将下面的代码添加到所有的loader之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">test</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;jquery&#x27;</span>),</span><br><span class="line">   <span class="attr">loader</span>: <span class="string">&#x27;expose?jQuery!expose?$&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用时改为如下方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;expose?$!jquery&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;jquery-ui&#x27;</span> <span class="comment">//插件可用   </span></span><br></pre></td></tr></table></figure><p> imports-loader、script-loader同样可达到此效果，配置与功能都非常相似，在此不一一说明。</p><h4 id="4-包装jquery-推荐使用"><a href="#4-包装jquery-推荐使用" class="headerlink" title="4. 包装jquery[推荐使用]"></a>4. 包装jquery[推荐使用]</h4><p>此方法只依赖于自己，完全不需要任何其他插件与加载器，创建jquery的包装对象jquery-vendor.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">$</span> = $</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">jQuery</span> = $</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $</span><br></pre></td></tr></table></figure><p>以后引用jquery时指向jquery-vendor.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import $ from &#x27;../assets/jquery-vendor.js&#x27;</span><br><span class="line">import &#x27;jquery-ui&#x27;</span><br><span class="line">//  此时UI的方法全部可用，如果需要引用bootstrap，可参照此方法</span><br></pre></td></tr></table></figure><p>为了调用方便，可在webpack配置文件中创建jquery-vendor.js的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">    jquery        : &#x27;src/assets/jquery-vendor.js&#x27; //    将其指向jquery-vendor.js所在位置</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="2-第三方库需要通过-类似requirejs机制-异步加载其他依赖库"><a href="#2-第三方库需要通过-类似requirejs机制-异步加载其他依赖库" class="headerlink" title="2. 第三方库需要通过 类似requirejs机制 异步加载其他依赖库"></a>2. 第三方库需要通过 类似requirejs机制 异步加载其他依赖库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是 MathJax 数学表达式解析库 加载扩展的一段代码</span></span><br><span class="line"><span class="comment">// 该库需要加载 extensions 而且是通过在页面插入script的方式加载的</span></span><br><span class="line"><span class="attr">loader</span>: &#123;</span><br><span class="line">    <span class="attr">JS</span>: <span class="keyword">function</span> (<span class="params">k, m</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="variable language_">this</span>.<span class="title function_">fileName</span>(k);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> l = a.<span class="title class_">Callback</span>([<span class="string">&quot;loadTimeout&quot;</span>, <span class="variable language_">this</span>, k]);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span>[k] = &#123;</span><br><span class="line">            <span class="attr">callback</span>: m,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="built_in">setTimeout</span>(l, <span class="variable language_">this</span>.<span class="property">timeout</span>),</span><br><span class="line">            <span class="attr">status</span>: <span class="variable language_">this</span>.<span class="property">STATUS</span>.<span class="property">OK</span>,</span><br><span class="line">            <span class="attr">script</span>: i</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span>[k].<span class="property">message</span> = a.<span class="property">Message</span>.<span class="title class_">File</span>(j);</span><br><span class="line">        i.<span class="property">onerror</span> = l;</span><br><span class="line">        i.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">        i.<span class="property">src</span> = k + <span class="variable language_">this</span>.<span class="title function_">fileRev</span>(j);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(i)</span><br><span class="line">    &#125;, <span class="attr">CSS</span>: <span class="keyword">function</span> (<span class="params">j, l</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="variable language_">this</span>.<span class="title function_">fileName</span>(j);</span><br><span class="line">        <span class="keyword">var</span> k = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;link&quot;</span>);</span><br><span class="line">        k.<span class="property">rel</span> = <span class="string">&quot;stylesheet&quot;</span>;</span><br><span class="line">        k.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        k.<span class="property">href</span> = j + <span class="variable language_">this</span>.<span class="title function_">fileRev</span>(i);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span>[j] = &#123;<span class="attr">callback</span>: l, <span class="attr">message</span>: a.<span class="property">Message</span>.<span class="title class_">File</span>(i), <span class="attr">status</span>: <span class="variable language_">this</span>.<span class="property">STATUS</span>.<span class="property">OK</span>&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(k);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span>.<span class="property">create</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, [<span class="variable language_">this</span>.<span class="property">timer</span>.<span class="property">file</span>, j], k)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>遇到这种情况，就不能用常规的方法引入第三方依赖，以上的方法都不适用，因为在编译期间不会再报错 但是在运行期间会报一个js文件加载404的错误。<br><img src="http://cdn-qiniu-blog.jajabjbj.top/15268396577912.jpg"><br>因为这是在运行之后通过注入script标签 加载插件 。而在编译时webpack不会检测到这种异步加载逻辑 并导入。</p><p>我的解决方案：<br>    要使能够通过异步加载 ，必须保证 映入的库 和他的依赖文件 相对文章不变 ，整体放到 编译后的目录。<br>以引入 MathJax 数学表达式解析库为例  由于MathJax 的加载扩展（MathMenu）是用到 类似 requirejs的异步加载机制 ，所以需要引入mathquill 只能通过 script 标签引入，不能通过 import 引入 mathquill</p><p>修改文件如下：</p><h4 id="1-webpack-config-js"><a href="#1-webpack-config-js" class="headerlink" title="1. webpack.config.js:"></a>1. webpack.config.js:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在编译打包时 把 /src/lib/下的 js文件复制到 www(编译输出目录)/lib 目录</span><br><span class="line">new CopyWebpackPlugin([ &#123;from: &#x27;./src/lib&#x27;, to: &#x27;lib&#x27;&#125;]),               </span><br></pre></td></tr></table></figure><h4 id="2-index-html"><a href="#2-index-html" class="headerlink" title="2. index.html:"></a>2. index.html:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/polyvplayer/polyvplayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/cat_mathjax/dist/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/cat_mathquill_build/mathquill.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/cat_mathquill_build/mathquill.css&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-添加文件夹：-x2F-src-x2F-lib"><a href="#3-添加文件夹：-x2F-src-x2F-lib" class="headerlink" title="3. 添加文件夹：&#x2F;src&#x2F;lib"></a>3. 添加文件夹：&#x2F;src&#x2F;lib</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/src/lib/jquery/ </span><br><span class="line">/src/lib/mathjax/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">webpack引入第三方库方案总结</summary>
    
    
    
    
    <category term="webpack" scheme="http://blog.jajabjbj.top/tags/webpack/"/>
    
  </entry>
  
</feed>
